<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>flask上传文件中文名称的处理</title>
      <link href="/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B8%AD%E6%96%87%E5%90%8D%E7%A7%B0%E7%9A%84%E5%A4%84%E7%90%86%E5%92%8Cpython%E5%AE%9E%E7%8E%B0/"/>
      <url>/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B8%AD%E6%96%87%E5%90%8D%E7%A7%B0%E7%9A%84%E5%A4%84%E7%90%86%E5%92%8Cpython%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>现象如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line">print(secure_filename(<span class="string">"一级标题.png"</span>))</span><br><span class="line"><span class="comment"># png # 输出中忽视了中文名称</span></span><br><span class="line">print(secure_filename(<span class="string">"kakakkak.png"</span>))</span><br><span class="line"><span class="comment"># kakakkak.png # 纯英文的不忽视</span></span><br><span class="line">print(secure_filename(<span class="string">"1232233.png"</span>))</span><br><span class="line"><span class="comment"># 1232233.png</span></span><br><span class="line">print(secure_filename(<span class="string">"迟迟不吃饭1232233.png"</span>))</span><br><span class="line"><span class="comment"># 1232233.png # 看下只去除了中文字符</span></span><br></pre></td></tr></table></figure><p>查看源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, sys, re</span><br><span class="line">text_type = str</span><br><span class="line">PY2 = sys.version_info[<span class="number">0</span>] == <span class="number">2</span></span><br><span class="line">WIN = sys.platform.startswith(<span class="string">'win'</span>)</span><br><span class="line">_format_re = re.compile(<span class="string">r'\$(?:(%s)|\&#123;(%s)\&#125;)'</span> % ((<span class="string">'[a-zA-Z_][a-zA-Z0-9_]*'</span>,) * <span class="number">2</span>))</span><br><span class="line">_entity_re = re.compile(<span class="string">r'&amp;([^;]+);'</span>)</span><br><span class="line">_filename_ascii_strip_re = re.compile(<span class="string">r'[^A-Za-z0-9_.-]'</span>)</span><br><span class="line">_windows_device_files = (<span class="string">'CON'</span>, <span class="string">'AUX'</span>, <span class="string">'COM1'</span>, <span class="string">'COM2'</span>, <span class="string">'COM3'</span>, <span class="string">'COM4'</span>, <span class="string">'LPT1'</span>,</span><br><span class="line">                         <span class="string">'LPT2'</span>, <span class="string">'LPT3'</span>, <span class="string">'PRN'</span>, <span class="string">'NUL'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secure_filename</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">r"""Pass it a filename and it will return a secure version of it.  This</span></span><br><span class="line"><span class="string">    filename can then safely be stored on a regular file system and passed</span></span><br><span class="line"><span class="string">    to :func:`os.path.join`.  The filename returned is an ASCII only string</span></span><br><span class="line"><span class="string">    for maximum portability.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    On windows systems the function also makes sure that the file is not</span></span><br><span class="line"><span class="string">    named after one of the special device files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; secure_filename("My cool movie.mov")</span></span><br><span class="line"><span class="string">    'My_cool_movie.mov'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; secure_filename("../../../etc/passwd")</span></span><br><span class="line"><span class="string">    'etc_passwd'</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; secure_filename(u'i contain cool \xfcml\xe4uts.txt')</span></span><br><span class="line"><span class="string">    'i_contain_cool_umlauts.txt'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The function might return an empty filename.  It's your responsibility</span></span><br><span class="line"><span class="string">    to ensure that the filename is unique and that you generate random</span></span><br><span class="line"><span class="string">    filename if the function returned an empty one.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param filename: the filename to secure</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(filename, text_type):</span><br><span class="line">        <span class="keyword">from</span> unicodedata <span class="keyword">import</span> normalize</span><br><span class="line">        <span class="comment"># Marek Čech、Beniardá怎样变成相对应的ascii码呢, 调用下面这句</span></span><br><span class="line">        filename = normalize(<span class="string">'NFKD'</span>, filename).encode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> PY2:</span><br><span class="line">            filename = filename.decode(<span class="string">'ascii'</span>)</span><br><span class="line">    <span class="keyword">for</span> sep <span class="keyword">in</span> os.path.sep, os.path.altsep:</span><br><span class="line">        <span class="keyword">if</span> sep:</span><br><span class="line">            filename = filename.replace(sep, <span class="string">' '</span>)</span><br><span class="line">    filename = str(_filename_ascii_strip_re.sub(<span class="string">''</span>, <span class="string">'_'</span>.join(</span><br><span class="line">                   filename.split()))).strip(<span class="string">'._'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># on nt a couple of special files are present in each folder.  We</span></span><br><span class="line">    <span class="comment"># have to ensure that the target file is not such a filename.  In</span></span><br><span class="line">    <span class="comment"># this case we prepend an underline</span></span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">'nt'</span> <span class="keyword">and</span> filename <span class="keyword">and</span> \</span><br><span class="line">       filename.split(<span class="string">'.'</span>)[<span class="number">0</span>].upper() <span class="keyword">in</span> _windows_device_files:</span><br><span class="line">        filename = <span class="string">'_'</span> + filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">也就是说,, 上面这个方法只支持`a-zA-Z0-9.`这几种字符, 只支持ascii字符</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>问题出在这一句<code>filename = normalize(&#39;NFKD&#39;, filename).encode(&#39;ascii&#39;, &#39;ignore&#39;)</code>的<code>encode(&#39;ascii&#39;, &#39;ignore&#39;)</code>上,</p><p>我们知道, python中对字符串的<code>encode</code>方法对于错误的处理有几种方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">str</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, encoding=<span class="string">'utf-8'</span>, errors=<span class="string">'strict'</span>)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        S.encode(encoding='utf-8', errors='strict') -&gt; bytes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Encode S using the codec registered for encoding. Default encoding</span></span><br><span class="line"><span class="string">        is 'utf-8'. errors may be given to set a different error</span></span><br><span class="line"><span class="string">        handling scheme. Default is 'strict' meaning that encoding errors raise</span></span><br><span class="line"><span class="string">        a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and</span></span><br><span class="line"><span class="string">        'xmlcharrefreplace' as well as any other name registered with</span></span><br><span class="line"><span class="string">        codecs.register_error that can handle UnicodeEncodeErrors.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b""</span></span><br></pre></td></tr></table></figure><p>具体效果如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"迟迟不吃饭1232233.png"</span>.encode(<span class="string">'ascii'</span>, <span class="string">'strict'</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;input&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment"># UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128)</span></span><br><span class="line"><span class="string">"迟迟不吃饭1232233.png"</span>.encode(<span class="string">'ascii'</span>, <span class="string">'replace'</span>)</span><br><span class="line"><span class="comment"># b'?????1232233.png'</span></span><br><span class="line"><span class="string">"迟迟不吃饭1232233.png"</span>.encode(<span class="string">'ascii'</span>, <span class="string">'xmlcharrefreplace'</span>)</span><br><span class="line"><span class="comment"># b'&amp;#36831;&amp;#36831;&amp;#19981;&amp;#21507;&amp;#39277;1232233.png'</span></span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>上传一张图片的时候, 例如一个名字是<code>/haha/pp/ll.jpg</code>, 那么是查找<code>11.jpg</code>还是<code>/haha/pp</code>目录下的<code>11.jpg</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateTitle</span><span class="params">(title)</span>:</span></span><br><span class="line">    rstr = <span class="string">r"[\/\\\:\*\?\"'\&lt;\&gt;\|]"</span>  <span class="comment"># '/ \ : * ? " &lt; &gt; |'</span></span><br><span class="line">    new_title = re.sub(rstr, <span class="string">"_"</span>, title)  <span class="comment"># 替换为下划线</span></span><br><span class="line">    <span class="keyword">return</span> new_title</span><br><span class="line"></span><br><span class="line">print(validateTitle(<span class="string">"""./ddd/sss\\sd'sd\\\\迟迟不吃饭"1232233.png"""</span>))</span><br><span class="line"><span class="comment"># ._ddd_sss_sd_sd__迟迟不吃饭_1232233.png</span></span><br></pre></td></tr></table></figure><p>对于一些业务中会有很多图片需要保留原名称但是不同人上传的名称可能一样的, 可以保存为下面的结构体:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Img &#123;</span><br><span class="line">    name <span class="keyword">string</span> <span class="comment">// 展示给用户的名称</span></span><br><span class="line">    secName <span class="keyword">string</span> <span class="comment">// 实际存储的名称</span></span><br><span class="line">    path <span class="keyword">string</span> <span class="comment">// 存储的路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="normalize"><a href="#normalize" class="headerlink" title="normalize"></a>normalize</h3><pre><code>Return the normal form &apos;form&apos; for the Unicode string unistr.Valid values for form are &apos;NFC&apos;, &apos;NFKC&apos;, &apos;NFD&apos;, and &apos;NFKD&apos;.</code></pre><p><img src="../404/normalize参数.png" alt="方法的四个参数"></p>]]></content>
      
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基本操作</title>
      <link href="/redis%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/redis%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>redis在执行命令之前, 根据对象的类型来判断一个对象是否可以执行给定的命令.</p><p>使用对象的另一个好处是, 我们可以针对不同的使用场景, 为对象设置多种不同的数据结构实现, 从而优化对象在不同场景下的使用效率.</p><p>除此之外, redis的对象系统还实现了基于引用计数技术的内存回收机制, 当程序不再使用某个对象的时候, 这个对象所占用的内存就会被主动释放.</p><p><strong>脑洞, 每个进程都有自己的文件描述符表, 所有进程共享一张文件表</strong></p><p>另外, redis还通过引用计数技术实现了对象共享机制, 这一机制可以在适当的条件下, 让多个数据库键共享一个对象来节约内存.</p><p>最后, redis的对象带有访问时间记录信息, 该信息可以用于计算数据库键的空转时长, 在服务器启用了maxmemory的情况下, 空转时间较大的那些键可能会优先被删除</p><p><strong>所以实现的是lru??</strong></p><h2 id="对象的类型与编码"><a href="#对象的类型与编码" class="headerlink" title="对象的类型与编码"></a>对象的类型与编码</h2><p>redis使用对象来表示数据库的key和value, 每当在redis新建一个键值对的时候, 会至少创建两个对象, 一个键对象, 一个value对象.</p><p>么个对象都是一个<code>redisObject</code>对象, 格式类似于:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 类型</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    <span class="keyword">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 指向底层实现数据结构的指针</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    ...</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure><p>redis可以用过type和object encoding查看一个对象的类型和编码方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> msg <span class="string">"haha"</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> msg</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; RPUSH numbers 1 2 3 4 5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> numbers</span><br><span class="line">list</span><br><span class="line">127.0.0.1:6379&gt; OBJECT encoding msg</span><br><span class="line"><span class="string">"embstr"</span></span><br><span class="line">127.0.0.1:6379&gt; OBJECT encoding numbers</span><br><span class="line"><span class="string">"quicklist"</span></span><br></pre></td></tr></table></figure><p>retis通过<code>encoding</code>属性来设置对象使用的编码方式, 而不是用特定的类型的对象关联一种固定的编码, 这样redis可以根据不同的使用场景选择不同的编码, 在某一场景下可以优化:</p><ul><li>列表包含的元素比较少的时候, redis使用压缩列表作为列表对象的底层实现:<ul><li>因为压缩列表比双端列表更节约内存, 并且元素较少的时候在内存中以连续快方式保存的压缩列表比双端列表可以更快的被载入到内存中..<strong>所以是因为读取是分快的还是什么原因????</strong></li><li>随着列表的逐渐增大, 压缩列表的优势收缩, 然后采用双端链表实现</li></ul></li></ul><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis对象</title>
      <link href="/redis%E5%AF%B9%E8%B1%A1/"/>
      <url>/redis%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yy1234/p/7809551.html" target="_blank" rel="noopener">refer</a></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。<br>常规key-value缓存应用；<br>常规计数：微博数，粉丝数等。</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。<br>存储部分变更的数据，如用户信息等。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>list就是链表，略有数据结构知识的人都应该能理解其结构。使用Lists结构，我们可以轻松地实现最新消息排行等功能。List的另一个应用就是消息队列，可以利用List的PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作List中某一段的api，你可以直接查询，删除List中某一段的元素。<br>Redis的list是每个子元素都是String类型的双向链表，可以通过push和pop操作从列表的头部或者尾部添加或者删除元素，这样List即可以作为栈，也可以作为队列。</p><ul><li><p>消息队列系统<br>使用list可以构建队列系统，使用sorted set甚至可以构建有优先级的队列系统。<br>比如：将Redis用作日志收集器<br>实际上还是一个队列，多个端点将日志信息写入Redis，然后一个worker统一将所有日志写到磁盘。</p></li><li><p>取最新N个数据的操作</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//把当前登录人添加到链表里</span><br><span class="line">ret = r.lpush(&quot;login:last_login_times&quot;, uid)</span><br><span class="line">//保持链表只有N位</span><br><span class="line">ret = redis.ltrim(&quot;login:last_login_times&quot;, 0, N-1)</span><br><span class="line">//获得前N个最新登陆的用户Id列表</span><br><span class="line">last_login_list = r.lrange(&quot;login:last_login_times&quot;, 0, N-1)</span><br></pre></td></tr></table></figure><p>比如sina微博:<br>在Redis中我们的最新微博ID使用了常驻缓存，这是一直更新的。但是做了限制不能超过5000个ID，因此获取ID的函数会一直询问Redis。只有在start/count参数超出了这个范围的时候，才需要去访问数据库。<br>系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，而主页或第一个评论页是不会麻烦到硬盘上的数据库了。</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set就是一个集合，集合的概念就是一堆不重复值的组合。利用Redis提供的set数据结构，可以存储一些集合性的数据。set中的元素是没有顺序的。<br>案例： </p><p>在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p><p>交集，并集，差集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//book表存储book名称</span><br><span class="line">set book:1:name &quot;The Ruby Programming Language&quot;</span><br><span class="line">set book:2:name &quot;Ruby on rail&quot;</span><br><span class="line">set book:3:name &quot;Programming Erlang&quot;</span><br><span class="line"></span><br><span class="line">//tag表使用集合来存储数据，因为集合擅长求交集、并集</span><br><span class="line">sadd tag:ruby 1</span><br><span class="line">sadd tag:ruby 2</span><br><span class="line">sadd tag:web 2</span><br><span class="line">sadd tag:erlang 3</span><br><span class="line"></span><br><span class="line">//即属于ruby又属于web的书？</span><br><span class="line"> inter_list = redis.sinter(&quot;tag:web&quot;, &quot;tag:ruby&quot;)</span><br><span class="line">//即属于ruby，但不属于web的书？</span><br><span class="line"> diff_list = redis.sdiff(&quot;tag:ruby&quot;, &quot;tag:web&quot;)</span><br><span class="line">//属于ruby和属于web的书的合集？</span><br><span class="line"> union_list = redis.sunion(&quot;tag:ruby&quot;, &quot;tag:web&quot;)</span><br></pre></td></tr></table></figure><p>获取某段时间所有数据去重值<br>这个使用Redis的set数据结构最合适了，只需要不断地将数据往set中扔就行了，set意为集合，所以会自动排重。</p><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted set"></a>sorted set</h2><p>和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如一个存储全班同学成绩的sorted set，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。可以用sorted set来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p><h3 id="排行榜应用，取TOP-N操作"><a href="#排行榜应用，取TOP-N操作" class="headerlink" title="排行榜应用，取TOP N操作"></a>排行榜应用，取TOP N操作</h3><p>这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的sorted set出马了，将你要排序的值设置成sorted set的score，将具体的数据设置成相应的value，每次只需要执行一条ZADD命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//将登录次数和用户统一存储在一个sorted set里</span><br><span class="line">zadd login:login_times 5 1</span><br><span class="line">zadd login:login_times 1 2</span><br><span class="line">zadd login:login_times 2 3</span><br><span class="line"></span><br><span class="line">//当用户登录时，对该用户的登录次数自增1</span><br><span class="line">ret = r.zincrby(&quot;login:login_times&quot;, 1, uid)</span><br><span class="line">//那么如何获得登录次数最多的用户呢，逆序排列取得排名前N的用户</span><br><span class="line">ret = r.zrevrange(&quot;login:login_times&quot;, 0, N-1)</span><br></pre></td></tr></table></figure><p>比如在线游戏的排行榜，根据得分你通常想要：</p><pre><code>- 列出前100名高分选手- 列出某用户当前的全球排名</code></pre><p>这些操作对于Redis来说小菜一碟，即使你有几百万个用户，每分钟都会有几百万个新的得分。<br>模式是这样的，每次获得新得分时，我们用这样的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZADD leaderboard &lt;score&gt; &lt;username&gt;</span><br><span class="line">你可能用userID来取代username，这取决于你是怎么设计的。 </span><br><span class="line">得到前100名高分用户很简单：</span><br><span class="line">ZREVRANGE leaderboard 0 99</span><br><span class="line">用户的全球排名也相似，只需要：</span><br><span class="line">ZRANK leaderboard &lt;username&gt;</span><br></pre></td></tr></table></figure></p><p>需要精准设定过期时间的应用<br>比如你可以把上面说到的sorted set的score值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，你完全可以把Redis里这个过期时间当成是对数据库中数据的索引，用Redis来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。</p><h3 id="范围查找"><a href="#范围查找" class="headerlink" title="范围查找"></a>范围查找</h3><p>来自Redis在Google Group上的一个问题，有一位同学发贴求助，说要解决如下的一个问题：他有一个IP范围对应地址的列表，现在需要给出一个IP的情况下，迅速的查找到这个IP在哪个范围，也就是要判断此IP的所有地。这个问题引来了Redis作者Salvatore Sanfilippo（@antirez）的回答。解答如下:</p><p>例如有下面两个范围，10－20和30－40</p><ul><li>A_start 10, A_end 20 </li><li>B_start 30, B_end 40 </li></ul><p>我们将这两个范围的起始位置存在Redis的sorted set数据结构中，基本范围起始值作为score，范围名加start和end为其value值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zadd ranges 10 A_start</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd ranges 20 A_end</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd ranges 30 B_start</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd ranges 40 B_end</span><br></pre></td></tr></table></figure><p>这样数据在插入sorted set后，相当于是将这些起始位置按顺序排列好了。<br>现在我需要查找15这个值在哪一个范围中，只需要进行如下的zrangbyscore查找：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zrangebyscore ranges (15 +inf LIMIT 0 1</span><br><span class="line">1) <span class="string">"A_end"</span></span><br></pre></td></tr></table></figure><p>这个命令的意思是在Sorted Sets中查找大于15的第一个值。（+inf在Redis中表示正无穷大，15前面的括号表示&gt;15而非&gt;=15）<br>查找的结果是A_end，由于所有值是按顺序排列的，所以可以判定15是在A_start到A_end区间上，也就是说15是在A这个范围里。至此大功告成。<br>当然，如果你查找到的是一个start，比如咱们用25，执行下面的命令:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; zrangebyscore ranges (25 +inf LIMIT 0 1</span><br><span class="line">1) <span class="string">"B_start"</span></span><br></pre></td></tr></table></figure><p>返回结果表明其下一个节点是一个start节点，也就是说25这个值不处在任何start和end之间，不属于任何范围。<br>当然，这个例子仅适用于类似上面的IP范围查找的案例，因为这些值范围之间没有重合。如果是有重合的情况，这个问题本身也就变成了一个一对多的问题。</p><h2 id="Pub-Sub"><a href="#Pub-Sub" class="headerlink" title="Pub/Sub"></a>Pub/Sub</h2><p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>Pub/Sub构建实时消息系统</p><p>Redis的Pub/Sub系统可以构建实时的消息系统<br>比如很多用Pub/Sub构建的实时聊天系统的例子。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis数据结构</title>
      <link href="/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>redis的字符串采用了空间换时间的方法来提高效率, 一个redis的字符串结构称为SDS(simple dynamic string):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> len; <span class="comment">// 记录buf数组中已经使用的字节数量, 也就是sds保存的字符串长度</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>; <span class="comment">// 记录buf中空闲的数量</span></span><br><span class="line">    <span class="keyword">char</span> buf[]; <span class="comment">// 字节数组, 整个sds占用的字符串数组的长度</span></span><br><span class="line">    <span class="comment">// buf的长度=len+free+最后的一个空字符`\0` </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的一个好处是:</p><ol><li>直接记录了字符串的长度, 获取字符串长度的代价是$O(1)$, c字符串的是$O(n)$</li><li>杜绝缓冲区溢出的问题, 拼接字符串的话先检查buf大小够不够, 不够的话分配足够的空间然后再拼接字符串.</li></ol><p>为了提高修改字符串的效率, 提供了预分配和惰性删除两种策略:</p><ul><li>预分配</li></ul><p>修改字符串的时候, 除了分配额外的需要空间外, 还根据分配后len的大小:</p><ul><li>如果sds的长度小于1mb, 那么将free设置大小为len</li><li><p>如果sds长度大于1mb, 那么free的value设置为1mb</p></li><li><p>惰性删除</p></li></ul><p>如果减少字符串长度的话, 会修改字符串为需要的值, 修改len属性, 然后修改free属性, 但是不会直接的将这部分内存释放, 而是留着为今后的增长需要, 或者在需要的时候调用sdsfree释放内存.</p><p>sds使用len属性读取一个字符串而不是用<code>\0</code>来处理, 这样一个好处是O1的读取效率, 而且不用担心字符串的字符安全问题.</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>redis的链表可以用作一个简单的消息队列, 或者一些别的功能. \</p><p>redis列表键的底层实现之一就是链表, 当一个列表键包含了数量比较多的元素, 或者列表中包含的元素都是比较长的字符串的时候, redis就会使用列表键的底层实现.</p><p>内部实现上, 一个链表结构如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">void</span> *value; <span class="comment">// 这里注意value指针的类型</span></span><br><span class="line">&#125; listNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    listNode *head;</span><br><span class="line">    listNode *tail;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len; <span class="comment">// 链表包含的节点的数量</span></span><br><span class="line">    <span class="keyword">void</span> *(*dup) (<span class="keyword">void</span> *ptr); <span class="comment">// 节点复制函数</span></span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">free</span>) (<span class="keyword">void</span> *ptr); <span class="comment">// 节点释放函数</span></span><br><span class="line">    <span class="keyword">void</span> (*match) (<span class="keyword">void</span> *ptr, <span class="keyword">void</span> *key); <span class="comment">// 节点比较函数</span></span><br><span class="line">&#125; <span class="built_in">list</span>;</span><br></pre></td></tr></table></figure><p>redis链表的特性有:</p><ul><li>双端链表</li><li>无环, prev和next的指针都指向null</li><li>带有链表的长度</li><li>多态, 使用void*指针保存节点值, 实现了dup, free, match三个属性</li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>一个redis的字典的结构如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size; <span class="comment">// hash表大小</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask; <span class="comment">// 用于计算索引值, 总是size-1</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used; <span class="comment">// 这里为啥用long类型, 已有的节点数量</span></span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="keyword">union</span> &#123; <span class="comment">// value</span></span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">uint64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span> <span class="comment">// 指向下一个hash表节点, 形成链表</span></span><br><span class="line">    <span class="comment">// 也就是说, redis用链表法解决key冲突的问题.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>redis通过rehash方法实现hash表的扩展和收缩.</p><p>这里比较关键的两点:</p><ol><li><p>hash的ht[0]和ht[1]交替操作, 扩容和收缩的单位是<code>&gt;2</code>或者<code>&lt;2</code></p></li><li><p>渐进rehash</p></li></ol><p>为了不影响使用性能, redis不是一次性将ht[0]里面的所有数据全部rehash到ht[1]上, 而是渐进式进行.</p><ul><li>为ht[1]分配空间, 让字典同时持有ht[0]和ht[1]两个hash表</li><li>将字典的索引计数器rehashidx设置为0, 表示rehash开始, 默认这个值没有的时候是-1</li><li>字典的删除查找和更新操作会同在两个hash表上进行, 例如如果需要查找一个key, 会先在ht[0]上查找, 没有的话在ht[1]上查找</li><li>在执行rehash的时候, 新添加到字典的key-value一律会保存到ht[1]里面, 而ht[0]则不再进行任何添加操作, 这个措施保证了ht[0]中包含的键值对数量只会减小不会增加最后随着rehash变成空表</li></ul><p><strong>小问题, 啥时候进行扩容, python貌似是死的2/3</strong></p><h4 id="脑洞"><a href="#脑洞" class="headerlink" title="脑洞"></a>脑洞</h4><p>python字典的实现上, 扩容也是左移或者右移</p><p>分布式系统的分片数量增加, 也是一个rehash的过程.</p><h2 id="跳跃表-跳表"><a href="#跳跃表-跳表" class="headerlink" title="跳跃表/跳表"></a>跳跃表/跳表</h2><p>redis的有序集合通过dict和跳表同时实现, 兼顾dict的O1和跳表的有序性.</p><p>跳表可以说是对平衡树的一种工程上的妥协.</p><p>redis使用跳表作为有序集合键的底层实现之一. 如果一个有序集合包含的元素数量较多, 或者有序集合中元素是比较长的字符串的话, 会使用跳表作为有序集合的底层实现.</p><p><strong>todo, 这是因为如果量小的话, 直接使用数组效率会更高???</strong></p><p>redis中, 跳表用在了两个地方:</p><ul><li>实现有序集合键</li><li>集群节点中用作内部数据结构</li></ul><p>redis中跳表新添加数据和删除数据如何操作</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis高可用</title>
      <link href="/redis%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/redis%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubectl delete pods</title>
      <link href="/kubectl-delete-pods/"/>
      <url>/kubectl-delete-pods/</url>
      
        <content type="html"><![CDATA[<p>起因是想将学习添加的一些服务全部删掉, 然后直接执行<code>kubect delete pods,services</code>, 提示删除成功, 执行<code>kubectl get pods</code>发现删掉的pods重新启动, 然后想到, 其实我们部署的是<code>deployment</code>, 也就是说, pods只是一个执行的实体, 而不是需要删除的服务.</p><p>一个pod的生成方式有:</p><ul><li>rc</li><li>rs</li><li>deployment</li></ul><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@tiku-172017010223 ~]# kubectl get deployments</span><br><span class="line">NAME                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">fantastic-hare-traefik   1/1     1            1           45h</span><br><span class="line">hello-minikube           0/1     1            0           47h</span><br><span class="line">web                      0/1     1            0           69m</span><br><span class="line">[root@tiku-172017010223 ~]# kubectl get rs</span><br><span class="line">NAME                               DESIRED   CURRENT   READY   AGE</span><br><span class="line">fantastic-hare-traefik-9ffd4cffb   1         1         1       6m38s</span><br><span class="line">hello-minikube-56cdb79778          1         1         0       6m38s</span><br><span class="line">web-ddb799d85                      1         1         0       6m38s</span><br><span class="line">[root@tiku-172017010223 ~]# kubectl get rc</span><br><span class="line">No resources found.</span><br><span class="line"></span><br><span class="line">[root@tiku-172017010223 ~]# kubectl delete deployments,rs,rc --all</span><br><span class="line">deployment.extensions "fantastic-hare-traefik" deleted</span><br><span class="line">deployment.extensions "hello-minikube" deleted</span><br><span class="line">deployment.extensions "web" deleted</span><br><span class="line">replicaset.extensions "fantastic-hare-traefik-9ffd4cffb" deleted</span><br><span class="line">replicaset.extensions "hello-minikube-56cdb79778" deleted</span><br><span class="line">replicaset.extensions "web-ddb799d85" deleted</span><br><span class="line">[root@tiku-172017010223 ~]# kubectl get rs</span><br><span class="line">No resources found.</span><br><span class="line">[root@tiku-172017010223 ~]# kubectl get pods</span><br><span class="line">No resources found.</span><br><span class="line">[root@tiku-172017010223 ~]# kubectl get rc</span><br><span class="line">No resources found.</span><br><span class="line">[root@tiku-172017010223 ~]# kubectl get rs</span><br><span class="line">No resources found.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu添加桌面侧边栏</title>
      <link href="/ubuntu%E6%B7%BB%E5%8A%A0%E6%A1%8C%E9%9D%A2%E4%BE%A7%E8%BE%B9%E6%A0%8F/"/>
      <url>/ubuntu%E6%B7%BB%E5%8A%A0%E6%A1%8C%E9%9D%A2%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://specifications.freedesktop.org/desktop-entry-spec/latest/index.html" target="_blank" rel="noopener">参考</a></p><p><a href="https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s06.html" target="_blank" rel="noopener">参考2</a></p><p>最简单的方法是多看两个applications目录下的文件总结下规律, 美滋滋</p><p>ubuntu的桌面配置项存在两个位置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用脚本位置</span></span><br><span class="line">~/.<span class="built_in">local</span>/share/applications</span><br><span class="line"><span class="comment">#对应的icon位置</span></span><br><span class="line">~/.<span class="built_in">local</span>/share/icons</span><br><span class="line">/usr/share/applications</span><br><span class="line">/usr/share/icons</span><br></pre></td></tr></table></figure><p>在｀~/.local/share/applications<code>下新建｀chifanbuhetang.desktop</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个文件是直接从`/usr/share/applications/google-chrome.desktop`文件复制的</span></span><br><span class="line">[Desktop Entry] <span class="comment">#指定文件类型</span></span><br><span class="line">Version=1.0 <span class="comment"># Version of the Desktop Entry Specification that the desktop entry conforms with. Entries that confirm with this version of the specification should use 1.1. Note that the version field is not required to be present.</span></span><br><span class="line">Name=chifanbuhetang <span class="comment"># Specific name of the application, for example "Mozilla".</span></span><br><span class="line"><span class="comment"># Only KDE 4 seems to use GenericName, so we reuse the KDE strings.</span></span><br><span class="line"><span class="comment"># From Ubuntu's language-pack-kde-XX-base packages, version 9.04-20090413.</span></span><br><span class="line">GenericName=我的浏览器 <span class="comment"># Generic name of the application, for example "Web Browser".</span></span><br><span class="line"><span class="comment"># Gnome and KDE 3 uses Comment.</span></span><br><span class="line">Comment=带了代理的chrome <span class="comment"># Tooltip for the entry, for example "View sites on the Internet". The value should not be redundant with the values of Name and GenericName.</span></span><br><span class="line">Exec=/usr/bin/google-chrome-stable %U --proxy-server=<span class="string">"socks5://127.0.0.1:1080"</span> <span class="comment"># Program to execute, possibly with arguments.</span></span><br><span class="line">StartupNotify=<span class="literal">true</span> <span class="comment"># If true, it is KNOWN that the application will send a "remove" message when started with the DESKTOP_STARTUP_ID environment variable set. If false, it is KNOWN that the application does not work with startup notification at all (does not shown any window, breaks even when using StartupWMClass, etc.). If absent, a reasonable handling is up to implementations (assuming false, using StartupWMClass, etc.).</span></span><br><span class="line">Terminal=<span class="literal">false</span> <span class="comment"># Whether the program runs in a terminal window.</span></span><br><span class="line">Icon=datou.png <span class="comment"># 这个文件存在icons/datou.png目录下，　貌似ｊｐｇ有问题 # con to display in file manager, menus, etc. If the name is an absolute path, the given file will be used. If the name is not an absolute path, the algorithm described in the Icon Theme Specification will be used to locate the icon.</span></span><br><span class="line">Type=Application <span class="comment"># This specification defines 3 types of desktop entries: Application (type 1), Link (type 2) and Directory (type 3). To allow the addition of new types in the future, implementations should ignore desktop entries with an unknown type.</span></span><br><span class="line">Categories=Network;WebBrowser; <span class="comment"># Categories in which the entry should be shown in a menu (for possible values see the Desktop Menu Specification).</span></span><br><span class="line">MimeType=text/html;text/xml;application/xhtml_xml;image/webp;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;</span><br><span class="line">Actions=new-window;new-private-window; <span class="comment"># The MIME type(s) supported by this application.</span></span><br><span class="line"></span><br><span class="line">[Desktop Action new-window]</span><br><span class="line">Name=New Window</span><br><span class="line">Exec=/usr/bin/google-chrome-stable  --proxy-server=<span class="string">"socks5://127.0.0.1:1080"</span></span><br><span class="line"></span><br><span class="line">[Desktop Action new-private-window]</span><br><span class="line">Name=New Incognito Window</span><br><span class="line">Exec=/usr/bin/google-chrome-stable --incognito  --proxy-server=<span class="string">"socks5://127.0.0.1:1080"</span></span><br></pre></td></tr></table></figure><h2 id="最后，-脑洞下上面的Type字段"><a href="#最后，-脑洞下上面的Type字段" class="headerlink" title="最后， 脑洞下上面的Type字段:"></a>最后， 脑洞下上面的<code>Type</code>字段:</h2><p>linux一切皆为文件, <code>ll</code>一下目录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ll</span><br><span class="line">drwxrwxr-x   9 qq qq   4096 6月  27 11:35 ./</span><br><span class="line">drwxr-xr-x  86 qq qq   4096 6月  27 11:27 ../</span><br><span class="line">-rw-rw-r--   1 qq qq   1995 5月  20 17:28 _config.yml</span><br><span class="line">-rw-rw-r--   1 qq qq 667766 6月  27 11:37 db.json</span><br><span class="line">drwxrwxr-x  23 qq qq   4096 6月  16 09:37 .deploy_git/</span><br></pre></td></tr></table></figure><ul><li><code>.</code><ul><li>当前目录</li></ul></li><li><p><code>..</code></p><ul><li>上一级目录</li></ul></li><li><p><code>drwxrwxr-x</code></p><ul><li>第1个字母：代表文件类型</li><li>第2~4字母：代表用户的权限</li><li>第5~7字母：代表用户组的权限</li><li>第8~10字母：代表其他的用户的权限</li></ul></li></ul><p>linux系统的文件类型:</p><table><thead><tr><th>文件属性</th><th>文件类型</th></tr></thead><tbody><tr><td>-</td><td>常规文件，即file</td></tr></tbody></table><p>d | 目录文件<br>b | block device 即块设备文件，如硬盘;支持以block为单位进行随机访问<br>c | character device 即字符设备文件，如键盘支持以character为单位进行线性访问<br>l | symbolic link 即符号链接文件，又称软链接文件<br>p |pipe 即命名管道文件<br>s |　socket 即套接字文件，用于实现两个进程进行通信</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 开发环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docsify创建markdown类型的文档</title>
      <link href="/docsify%E5%88%9B%E5%BB%BAmarkdown%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%87%E6%A1%A3/"/>
      <url>/docsify%E5%88%9B%E5%BB%BAmarkdown%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://docsify.js.org/#/zh-cn/quickstart" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flask路由梳理</title>
      <link href="/flask%E8%B7%AF%E7%94%B1%E6%A2%B3%E7%90%86/"/>
      <url>/flask%E8%B7%AF%E7%94%B1%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>demo如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upddate_userss</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka/aaaa')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updaate_userss</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka/&lt;int:id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updegate_userss</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>, port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>flask的每一条url对应着一个<code>Rule</code>实例, 打印其<code>_regex</code>跟<code>rule</code>如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##########################</span></span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> Rule</span><br><span class="line"></span><br><span class="line">a = Rule()</span><br><span class="line">a.compile() <span class="comment"># 这个方法会把路由编译成对应的正则, 然后等请求过来的时候进行匹配</span></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line"><span class="comment"># [^xyz]</span></span><br><span class="line"><span class="comment"># 负值字符集合。匹配未包含的任意字符。例如，“[^abc]"可以匹配"plain"中的"p"。</span></span><br><span class="line">[<span class="string">'\\|'</span>, <span class="string">'\\/users\\/kaka'</span>]</span><br><span class="line">re.compile(<span class="string">'^\\|\\/users\\/kaka$'</span>)</span><br><span class="line">/users/kaka</span><br><span class="line">.................</span><br><span class="line">[<span class="string">'\\|'</span>, <span class="string">'\\/users\\/kaka'</span>]</span><br><span class="line">re.compile(<span class="string">'^\\|\\/users\\/kaka(?&lt;!/)(?P&lt;__suffix__&gt;/?)$'</span>)</span><br><span class="line"><span class="comment"># (?&lt;!pattern)</span></span><br><span class="line"><span class="comment"># 反向否定预查，与正向否定预查类拟，只是方向相反。</span></span><br><span class="line"><span class="comment"># 例如“(?&lt;!95|98|NT|2000)Windows"能匹配"3.1Windows"中的"Windows"，</span></span><br><span class="line"><span class="comment"># 但不能匹配"2000Windows"中的"Windows"。</span></span><br><span class="line">/users/kaka/</span><br><span class="line">.................</span><br><span class="line">[<span class="string">'\\|'</span>, <span class="string">'\\/users\\/kaka\\/aaaa'</span>]</span><br><span class="line">re.compile(<span class="string">'^\\|\\/users\\/kaka\\/aaaa$'</span>)</span><br><span class="line">/users/kaka/aaaa</span><br><span class="line">.................</span><br><span class="line">[<span class="string">'\\|'</span>, <span class="string">'\\/users\\/kaka\\/'</span>, <span class="string">'(?P&lt;id&gt;\\d+)'</span>]</span><br><span class="line">re.compile(<span class="string">'^\\|\\/users\\/kaka\\/(?P&lt;id&gt;\\d+)$'</span>)</span><br><span class="line">/users/kaka/&lt;int:id&gt;</span><br><span class="line">.................</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> 路由寻址 </tag>
            
            <tag> 源码解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask路径最后的/加不加</title>
      <link href="/flask%E8%B7%AF%E5%BE%84%E6%9C%80%E5%90%8E%E7%9A%84-%E5%8A%A0%E4%B8%8D%E5%8A%A0/"/>
      <url>/flask%E8%B7%AF%E5%BE%84%E6%9C%80%E5%90%8E%E7%9A%84-%E5%8A%A0%E4%B8%8D%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="先下结论"><a href="#先下结论" class="headerlink" title="先下结论"></a>先下结论</h2><p>先说结论, 一般来说, 在项目初始就定好规矩, 在<code>restful</code>中, 将所有资源都看成文件, 那么统一成不加<code>/</code>的好, 然后访问加了斜杠的路径会报404, 加不加看心情但是一个项目中最好统一.</p><p>因为在flask中如果路由是<code>/haha/</code>, 那么访问<code>/haha</code>会被重定向到<code>/haha/</code>下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qq@zz:~/<span class="built_in">test</span>$ curl -I  http://127.0.0.1:3000/users/kaka</span><br><span class="line">HTTP/1.0 308 PERMANENT REDIRECT</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 273</span><br><span class="line">Location: http://127.0.0.1:3000/users/kaka/</span><br><span class="line">Server: Werkzeug/0.15.4 Python/3.6.6</span><br><span class="line">Date: Mon, 20 May 2019 07:39:15 GMT</span><br></pre></td></tr></table></figure><p>但是定义一个<code>/haha</code>的路径, 然后访问<code>/haha/</code>会报404:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qq@zz:~/<span class="built_in">test</span>$ curl -I  http://127.0.0.1:3000/users/kaka/</span><br><span class="line">HTTP/1.0 404 NOT FOUND</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 232</span><br><span class="line">Server: Werkzeug/0.15.4 Python/3.6.6</span><br><span class="line">Date: Mon, 20 May 2019 07:53:04 GMT</span><br></pre></td></tr></table></figure><h2 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h2><p>在flask路由的时候发现一个很好玩的事情, 代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_userss</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>, port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>然后调用:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">qq@zz:~$ curl http://127.0.0.1:3000/users/kaka/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"a"</span>: 11</span><br><span class="line">&#125;</span><br><span class="line">qq@zz:~$ curl http://127.0.0.1:3000/users/kaka</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"a"</span>: 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这是因为werkzug中所有的路由都存在一个列表中, 所以涉及到匹配的先后顺序</span></span><br></pre></td></tr></table></figure><p>然后将路径<code>/users/kaka</code>最后的斜杠顺序换过来:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/users/kaka')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_userss</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(a=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>, port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">qq@zz:~$ curl http://127.0.0.1:3000/users/kaka/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"a"</span>: 1</span><br><span class="line">&#125;</span><br><span class="line">qq@zz:~$ curl http://127.0.0.1:3000/users/kaka</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 3.2 Final//EN"</span>&gt;</span><br><span class="line">&lt;title&gt;Redirecting...&lt;/title&gt;</span><br><span class="line">&lt;h1&gt;Redirecting...&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;You should be redirected automatically to target URL: &lt;a href=<span class="string">"http://127.0.0.1:3000/users/kaka/"</span>&gt;http://127.0.0.1:3000/users/kaka/&lt;/a&gt;.  If not click the link.</span><br></pre></td></tr></table></figure><h2 id="找解决"><a href="#找解决" class="headerlink" title="找解决"></a>找解决</h2><p>在<code>werkzeug/routing.py</code>中:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    - you receive a `RequestRedirect` exception with a `new_url`</span><br><span class="line">      attribute.  This exception is used to notify you about a request</span><br><span class="line">      Werkzeug requests from your WSGI application.  This is <span class="keyword">for</span> example the</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">if</span> you request ``/foo`` although the correct URL is ``/foo/``</span><br><span class="line">      You can use the `RequestRedirect` instance as response-like object</span><br><span class="line">      similar to all other subclasses of `HTTPException`.</span><br><span class="line"></span><br><span class="line">`string`</span><br><span class="line">    Rule strings basically are just normal URL paths with placeholders <span class="keyword">in</span></span><br><span class="line">    the format ``&lt;converter(arguments):name&gt;`` <span class="built_in">where</span> the converter and the</span><br><span class="line">    arguments are optional.  If no converter is defined the `default`</span><br><span class="line">    converter is used <span class="built_in">which</span> means `string` <span class="keyword">in</span> the normal configuration.</span><br><span class="line"></span><br><span class="line">    URL rules that end with a slash are branch URLs, others are leaves.</span><br><span class="line">    If you have `strict_slashes` enabled (<span class="built_in">which</span> is the default), all</span><br><span class="line">    branch URLs that are matched without a trailing slash will trigger a</span><br><span class="line">    redirect to the same URL with the missing slash appended.</span><br></pre></td></tr></table></figure><p>追溯到第一使用地点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rule</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            self.strict_slashes</span><br><span class="line">            <span class="keyword">and</span> <span class="keyword">not</span> self.is_leaf</span><br><span class="line">            <span class="keyword">and</span> <span class="keyword">not</span> groups.pop(<span class="string">"__suffix__"</span>)</span><br><span class="line">            <span class="keyword">and</span> (</span><br><span class="line">                method <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> self.methods <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> method <span class="keyword">in</span> self.methods</span><br><span class="line">                )</span><br><span class="line">            ):</span><br><span class="line">                <span class="keyword">raise</span> RequestSlash()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapAdapter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, path_info=None, method=None, return_rule=False, query_args=None)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> rule <span class="keyword">in</span> self.map._rules:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            rv = rule.match(path, method)</span><br><span class="line">        <span class="keyword">except</span> RequestSlash:</span><br><span class="line">            <span class="keyword">raise</span> RequestRedirect(</span><br><span class="line">                self.make_redirect_url(</span><br><span class="line">                    url_quote(path_info, self.map.charset, safe=<span class="string">"/:|+"</span>) +<span class="string">"/"</span>,</span><br><span class="line">                    query_args,</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">except</span> RequestAliasRedirect <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> RequestRedirect(</span><br><span class="line">                self.make_alias_redirect_url(</span><br><span class="line">                        path, rule.endpoint, e.matched_values, method, query_args</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(strict_slashes=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                redirect_defaults=True,)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>最后为什么一个匹配的上一个匹配不上, 这涉及到<code>werkzeug</code>的路由建立顺序和匹配顺序, 在另一篇路由的实现和查找中有提到.</p><h3 id="番外–linux的普通文件和目录文件"><a href="#番外–linux的普通文件和目录文件" class="headerlink" title="番外–linux的普通文件和目录文件"></a>番外–linux的普通文件和目录文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">qq@zz:~/<span class="built_in">test</span>$ touch haha</span><br><span class="line">qq@zz:~/<span class="built_in">test</span>$ mkdir kaka</span><br><span class="line">qq@zz:~/<span class="built_in">test</span>$ <span class="built_in">stat</span> haha</span><br><span class="line">  文件：<span class="string">'haha'</span></span><br><span class="line">  大小：0         块：0          IO 块：4096   普通空文件</span><br><span class="line">设备：806h/2054dInode：1058541     硬链接：1</span><br><span class="line">权限：(0664/-rw-rw-r--)  Uid：( 1000/      qq)   Gid：( 1000/      qq)</span><br><span class="line">最近访问：2019-05-20 15:34:08.849485139 +0800</span><br><span class="line">最近更改：2019-05-20 15:34:08.849485139 +0800</span><br><span class="line">最近改动：2019-05-20 15:34:08.849485139 +0800</span><br><span class="line">创建时间：-</span><br><span class="line">qq@zz:~/<span class="built_in">test</span>$ <span class="built_in">stat</span> kaka</span><br><span class="line">  文件：<span class="string">'kaka'</span></span><br><span class="line">  大小：4096      块：8          IO 块：4096   目录</span><br><span class="line">设备：806h/2054dInode：1061448     硬链接：2</span><br><span class="line">权限：(0775/drwxrwxr-x)  Uid：( 1000/      qq)   Gid：( 1000/      qq)</span><br><span class="line">最近访问：2019-05-20 15:34:12.837483383 +0800</span><br><span class="line">最近更改：2019-05-20 15:34:12.837483383 +0800</span><br><span class="line">最近改动：2019-05-20 15:34:12.837483383 +0800</span><br><span class="line">创建时间：-</span><br><span class="line">qq@zz:~/<span class="built_in">test</span>$ ll</span><br><span class="line">总用量 12</span><br><span class="line">drwxrwxr-x  3 qq qq 4096 5月  20 15:34 ./</span><br><span class="line">drwxr-xr-x 80 qq qq 4096 5月  20 15:02 ../</span><br><span class="line">-rw-rw-r--  1 qq qq    0 5月  20 15:34 haha</span><br><span class="line">drwxrwxr-x  2 qq qq 4096 5月  20 15:34 kaka/</span><br></pre></td></tr></table></figure><p>在linux下面, 普通文件结尾为<code>filename</code>, 目录文件结尾是<code>dirname/</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> flask源码 </tag>
            
            <tag> flask路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python有趣的函数</title>
      <link href="/python%E6%9C%89%E8%B6%A3%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/python%E6%9C%89%E8%B6%A3%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="methodcaller"><a href="#methodcaller" class="headerlink" title="methodcaller"></a>methodcaller</h2><p>进一步封装函数的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> operator <span class="keyword">import</span> methodcaller</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: cc = methodcaller(<span class="string">"replace"</span>, <span class="string">" "</span>, <span class="string">'='</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: a = <span class="string">"chi bu chi fan"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: cc(a)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'chi=bu=chi=fan'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 常用函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask处理http请求的数据</title>
      <link href="/flask%E5%A4%84%E7%90%86http%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
      <url>/flask%E5%A4%84%E7%90%86http%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>一般来说, 现在的python应用服务器遵从wsgi协议, flask的app获取gunicorn的<code>environ, start_response</code>参数, 然后处理, 抓包gunicorn发过来的environ数据如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'HTTP_ACCEPT'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line">    <span class="string">'HTTP_ACCEPT_ENCODING'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">    <span class="string">'HTTP_ACCEPT_LANGUAGE'</span>: <span class="string">'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7'</span>,</span><br><span class="line">    <span class="string">'HTTP_CACHE_CONTROL'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">    <span class="string">'HTTP_CONNECTION'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'HTTP_COOKIE'</span>: <span class="string">'session=.eJxdy0kKgCAUANC7_LUECuaw6iby018JTjRAFN291q0f7wYXA1iQSML0QaLyOhjuhZaj0ooDA9dozVio7GD39SAGlDEmF8tUv5nitVCZh0TnQZ2v-SsNt-3'</span>,</span><br><span class="line">    <span class="string">'HTTP_DNT'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'HTTP_HOST'</span>: <span class="string">'0.0.0.0:3000'</span>,</span><br><span class="line">    <span class="string">'HTTP_UPGRADE_INSECURE_REQUESTS'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'HTTP_USER_AGENT'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 '</span></span><br><span class="line">                        <span class="string">'(KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'PATH_INFO'</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="string">'QUERY_STRING'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'RAW_URI'</span>: <span class="string">'/'</span>,</span><br><span class="line">    <span class="string">'REMOTE_ADDR'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'REMOTE_PORT'</span>: <span class="string">'59734'</span>,</span><br><span class="line">    <span class="string">'REQUEST_METHOD'</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="string">'SCRIPT_NAME'</span>: <span class="string">''</span>,</span><br><span class="line">    <span class="string">'SERVER_NAME'</span>: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">    <span class="string">'SERVER_PORT'</span>: <span class="string">'3000'</span>,</span><br><span class="line">    <span class="string">'SERVER_PROTOCOL'</span>: <span class="string">'HTTP/1.1'</span>,</span><br><span class="line">    <span class="string">'SERVER_SOFTWARE'</span>: <span class="string">'gunicorn/19.9.0'</span>,</span><br><span class="line">    <span class="string">'gunicorn.socket'</span>: &lt;socket.socket fd=<span class="number">9</span>, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=<span class="number">0</span>, laddr=(<span class="string">'127.0.0.1'</span>, <span class="number">3000</span>), raddr=(<span class="string">'127.0.0.1'</span>, <span class="number">59734</span>)&gt;,</span><br><span class="line">    <span class="string">'wsgi.errors'</span>: &lt;gunicorn.http.wsgi.WSGIErrorsWrapper object at <span class="number">0x7fa5719707f0</span>&gt;,</span><br><span class="line">    'wsgi.file_wrapper': &lt;class 'gunicorn.http.wsgi.FileWrapper'&gt;,</span><br><span class="line">    <span class="string">'wsgi.input'</span>: &lt;gunicorn.http.body.Body object at <span class="number">0x7fa5719707b8</span>&gt;,</span><br><span class="line">    <span class="string">'wsgi.multiprocess'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'wsgi.multithread'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'wsgi.run_once'</span>: <span class="keyword">False</span>,</span><br><span class="line">    <span class="string">'wsgi.url_scheme'</span>: <span class="string">'http'</span>,</span><br><span class="line">    <span class="string">'wsgi.version'</span>: (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在flask中, 想获取前端的数据大概有三种方式, 在<code>Request</code>类中有描述:</p><ul><li>request.args()<ul><li>url中query部分字段</li></ul></li><li>request.form()</li><li>request.data</li><li>request.json()</li></ul><h2 id="request-args"><a href="#request-args" class="headerlink" title="request.args"></a><code>request.args</code></h2><p>这个方法主要获取请求url中的query字段, 在flask的<code>Request.args</code>方法中提取environ的<code>QUERY_STRING</code>字段进行解析, 具体实现位于<code>werkzeug.wrappers.base_request/BaseRequest</code>中.</p><h2 id="request-form"><a href="#request-form" class="headerlink" title="request.form"></a><code>request.form</code></h2><p>这个字段获取form表单的数据, 一般来说, http通过post或者put方法发送form数据, 然后定义<code>Content-Type</code>字段决定如何解析form数据:</p><h3 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a><code>application/x-www-form-urlencoded</code></h3><p>数据被编码成以<code>&amp;</code>分隔的键值对, 同时以 ‘=’ 分隔键和值. 非字母或数字的字符会被 <code>percent-encoding</code>: 这也就是为什么这种类型不支持二进制数据的原因 (应使用 multipart/form-data 代替).</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: foo.com</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 13</span><br><span class="line"></span><br><span class="line">say=Hi&amp;to=Mom</span><br></pre></td></tr></table></figure><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a><code>multipart/form-data</code></h3><p>一般上如果长传文件或者大的数据的话用这种方法, 因为上面的方法会对不安全的字符进行编码,</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /test.html HTTP/1.1 </span><br><span class="line">Host: example.org </span><br><span class="line">Content-Type: multipart/form-data;boundary=<span class="string">"boundary"</span> </span><br><span class="line"></span><br><span class="line">--boundary <span class="comment"># 这个值单词就是上面的value</span></span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"field1"</span> </span><br><span class="line"></span><br><span class="line">value1 </span><br><span class="line">--boundary </span><br><span class="line">Content-Disposition: form-data; name=<span class="string">"field2"</span>; filename=<span class="string">"example.txt"</span> </span><br><span class="line"></span><br><span class="line">value2</span><br></pre></td></tr></table></figure><h3 id="flask解析的实现"><a href="#flask解析的实现" class="headerlink" title="flask解析的实现"></a>flask解析的实现</h3><p>flask对form数据的解析是在<code>werkzeug.formparser.FormDataParser</code>中实现的, 对不同的<code>Content-Type</code>提供不同的解析方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parse_functions = &#123;</span><br><span class="line">    <span class="string">"multipart/form-data"</span>: _parse_multipart,</span><br><span class="line">    <span class="string">"application/x-www-form-urlencoded"</span>: _parse_urlencoded,</span><br><span class="line">    <span class="string">"application/x-url-encoded"</span>: _parse_urlencoded,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="request-json"><a href="#request-json" class="headerlink" title="request.json()"></a><code>request.json()</code></h2><p>现在一般都用json做前后端交互的格式, 看下lfaks的json解析过程, flask的json解析存在于<code>JSONMixin.get_json()</code>这个方法中, 先调用<code>is_json</code>查询mimetype是不是<code>application/.*json</code>, 如果是, 那么获取请求的data然后尝试调用<code>json.loads</code>方法解析数据成json格式, 如果不是, 直接返回<code>None</code>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcp的一些感想</title>
      <link href="/tcp%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/"/>
      <url>/tcp%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>在tcp协议中, 我们考虑下面几个问题:</p><ul><li>消息可以发送</li><li>消息能解析出正确的发送数据</li><li>消息确认到达</li><li>尽量的压榨性能</li></ul><p>按照惯例, 先放总结</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>ack机制</p><ul><li><p>这个类似的有kafka的消息确认机制, rabbitmq的确认机制.</p></li><li><p>变种的有心跳监测机制</p></li></ul></li><li><p>本地buffer批量发送</p><ul><li><p>kafka本地先buffer然后批量发送</p></li><li><p>mysql设置buffer区域, 先写入buffer然后批量刷盘, 刷盘的触发机制有buffer满或者达到超时时间.</p></li></ul></li><li><p>异常处理</p><ul><li>tcp设置urg=1告诉server这条消息优先级比较高, 先处理. </li></ul></li><li><p>数据校验</p><ul><li>将数据和校验位一起发送, 然后server确认数据是否正确, 类似于https的连接</li></ul></li><li><p>序列号</p><ul><li>用有序数组来确认顺序还是添加序号确认顺序, 这是个问题.</li></ul></li><li><p>随机序列号</p><ul><li>初始给出一个随机序列号防止被黑, 跟https中建立连接的过程有点关系</li></ul></li></ol><h2 id="三次握手和四次挥手"><a href="#三次握手和四次挥手" class="headerlink" title="三次握手和四次挥手"></a>三次握手和四次挥手</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>在tcp中client和server是平等的, 都接收和发送消息, 所以必须要确认都能收都能接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c: 我能发, 你能收么, 你看我打算从x这个初始序列号给你发消息</span><br><span class="line">s: 我能收, 你看我也能发, 你看我知道你下次发的序列号开始是x+1, 我给你发消息从y开始</span><br><span class="line">c: 我也能收, 我知道你打算从y+1开始给我发消息</span><br></pre></td></tr></table></figure><p>感觉这里之所以x+1是为了编码实现的方便, 跟虚拟内存一样.</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c: 我不打算发了, 我发的最后一个是<span class="variable">$u</span>$</span><br><span class="line">s :哦, 我收到了, 给你确认是u+1</span><br><span class="line">s: 我最后给你确认你发的是u+1, 我最后自己发的是v</span><br><span class="line">c: 哦, 我收到你最后发的v+1了, 告辞</span><br></pre></td></tr></table></figure><h2 id="差错控制机制"><a href="#差错控制机制" class="headerlink" title="差错控制机制"></a>差错控制机制</h2><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><ul><li><p>由于受到网络最大传输单元的限制, tcp不可能一次就将所有的消息发送完成, 而需要将消息分段发出, tcp发送数据的基本单位是段.</p></li><li><p>tcp每段数据开头都带有一个标示该段数据的32位序号, 这里类似于数组的地址就是数组开头第一个元素的地址一样</p></li></ul><h3 id="确认应答"><a href="#确认应答" class="headerlink" title="确认应答"></a>确认应答</h3><ul><li><p>确认应答采用滑动窗口的方式</p><ul><li><p>发送端的发送窗口大小 = min[拥塞窗口, 接收端公告的接收窗口]</p></li><li><p>client在发送完窗口大小的数据后, 等待接收端的确认消息.</p></li></ul></li><li><p>确认过程</p><ul><li>server收到消息后可以逐个确认也可以批量确认, 然后给出确认序号是最后一个发送序号+1, 也就是告诉client下次接收消息的开始序号</li><li>一般来说, 确认消息会捎带在server发送的数据中, 这样可以提高网络传输的效率.</li><li>ack返回有两个条件, 一个是跟着server的数据一起返回, 另一个是超时, 这个超时时间不能大于client重传定时器的超时时间</li><li>todo<ul><li>这里类似于本地一个buffer, 然后buffer满了就发送, 或者等待超时就发送</li><li>kafka先将消息buffer到本地,然后一起发送,这样可以提高效率.// 需不需要考虑本地消息丢失的问题</li></ul></li></ul></li><li><p>错序确认</p><ul><li>如果因为网络抖动或者什么原因, 4001消息的确认在2001的前面, 那么server会理科向client发送确认应答, ack的value是正确的确认序号+1, 也就是2001. 这样就会产生很多2001的ack, client根据这个ack确认是否需要重发. server会将这些错序的消息buffer到本地, 直到收到正确的</li></ul></li><li><p>消息丢失</p><ul><li>消息丢失的话, 后面的消息会一直重复确认, 逐渐将重传定时器溢出, 然后重发</li></ul></li></ul><p><strong>所以乱序和丢失的区别在于先是乱序的那个序号到达还是client的重传定时器溢出????</strong></p><h3 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h3><ul><li>client发送一个tcp报文, 会将这个报文暂存到缓冲区, 并设置一个buffer超时时间, 过了这个时间如果没有收到ack的话就会重传.<ul><li>问题的关键在于如何设置这个超时时间</li></ul></li></ul><ul><li>client收到了server的多个重复的ack, 默认是3个, 那么就会重新发送消息</li></ul><ul><li>重传的话到底发送哪条消息?<ul><li>2的话只发送丢的那条就ok</li><li>1是因为超时或者网络不稳定什么的, 发送丢的那条和后面的全部消息</li></ul></li></ul><h2 id="tcp的拥塞机制"><a href="#tcp的拥塞机制" class="headerlink" title="tcp的拥塞机制"></a>tcp的拥塞机制</h2><p>慢启动</p><p>重传定时器溢出的时候向下调整</p><p>连续接收到多个重复确认应答的时候向下调整</p>]]></content>
      
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> tcp协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ps操作的一些记录</title>
      <link href="/ps/"/>
      <url>/ps/</url>
      
        <content type="html"><![CDATA[<h2 id="常用ps命令"><a href="#常用ps命令" class="headerlink" title="常用ps命令"></a>常用ps命令</h2><h3 id="列出-BSD-系统上的所有进程"><a href="#列出-BSD-系统上的所有进程" class="headerlink" title="列出 BSD 系统上的所有进程"></a>列出 BSD 系统上的所有进程</h3><p> ps-A<br>-A 命令行选项与同时使用 -a 和 -x 选项等效，其中 -a 显示拥有控制终端的进程，-x 显示没有控制终端的进程。<br>在 SVR4 变种中，显示所有正在运行的进程（不论它是否拥有控制终端）的命令行选项是 -e 。从所显示的进程来看，它和 BSD 的 -A 选项是等价的。可以在清单 4 中看到输出的示例。</p><p>ps 工具包含许多标准的显示列集。例如在 SVR4 中，经常使用 ps -ef 来获取关于列出进程的更详细的信息，包括父进程 ID、处理器利用率、开始时间以及更详细的命令行</p><p>这些选项存在的问题是，尽管它们显示了更多的信息，但这些信息并不总是特别有用，或者在寻找某个特定进程时包含了不希望看到的扰乱显示的信息。</p><p>幸运的是，所有版本的 ps 还包括了指定要显示的列的功能。可以广泛地使用这种命令，不管是仅提取所需要的信息，还是在异类环境中使用它来创造标准化的跨不同 UNIX 环境的输出。</p><p>要使用这一特性，可使用 -o 命令行选项，并列出要显示的列，以逗号做列的分隔符。尽管可选择的列的范围有一些差别，但在不同的 UNIX 版本中，大部分列都是标准的。例如，所有变种中都有 pid、ppid（父进程 ID）、command、RSS（驻留集大小或内存使用情况）以及 priority。</p><p>使用时，可以用 -o 来选择列及其显示顺序。例如，要获取 pid、ppid 和 commond，在 BSD 中可以使用 -opid,ppid,command，如清单 7 所示，或者在 SVR4 中使用 -opid,ppid,comm，如清单 8 所示。</p><p>清单 7. 在 BSD 中选择特定的列<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -o pid,ppid,<span class="built_in">command</span></span><br><span class="line">  PID  PPID COMMAND</span><br><span class="line">  391   332 /bin/bash</span><br><span class="line"> 9165   391 emacs</span><br></pre></td></tr></table></figure></p><p>清单 8. 在 SVR4 中选择特定的列<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ps -opid,ppid,comm</span><br><span class="line">  PID  PPID COMMAND</span><br><span class="line">  555   552 -sh</span><br><span class="line">  622   555 ps</span><br></pre></td></tr></table></figure></p><h3 id="列出特定进程"><a href="#列出特定进程" class="headerlink" title="列出特定进程"></a>列出特定进程</h3><p>ps -ef | grep + 进程名称关键字</p><p>根据用户列出进程</p><p>ps -U root</p><h3 id="根据关键字关闭进程"><a href="#根据关键字关闭进程" class="headerlink" title="根据关键字关闭进程"></a>根据关键字关闭进程</h3><p>ps -e -opid,command |grep httpd|awk ‘{print $1}’|xargs kill -9</p><p>或者用脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">HOSTTYPE=`uname -s`</span><br><span class="line"> </span><br><span class="line">SIGNAL=<span class="variable">$1</span></span><br><span class="line">STRING=<span class="variable">$2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> -o -z <span class="string">"<span class="variable">$2</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Usage: <span class="variable">$0</span> signal string</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$HOSTTYPE</span> <span class="keyword">in</span></span><br><span class="line">    Darwin|BSD)</span><br><span class="line">    ps -a -opid,<span class="built_in">command</span> | grep <span class="variable">$STRING</span> | awk <span class="string">'&#123; print $1; &#125;'</span> | xargs <span class="built_in">kill</span> <span class="variable">$SIGNAL</span></span><br><span class="line">    ;;</span><br><span class="line">    Linux|Solaris|AIX|HP-UX)</span><br><span class="line">    ps -e -opid,<span class="built_in">command</span> | grep <span class="variable">$STRING</span> | awk <span class="string">'&#123; print $1; &#125;'</span> | xargs <span class="built_in">kill</span> <span class="variable">$SIGNAL</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="计算内存使用情况"><a href="#计算内存使用情况" class="headerlink" title="计算内存使用情况"></a>计算内存使用情况</h3><p>ps 工具还提供了我们目前尚未涉及的两个列。RSS 列提供了进程的“驻留集大小”，这是该进程所使用的物理内存量，也是进程占用多少实际内存的指示。VSZ 列详细列出进程正在使用的内存总量，包括所分配的内部存储，但通常已被交换到磁盘。对于大多数 ps 变体而言，这两个列都是比较常用的。</p><p>确定这两个数据能够更好地了解内存的使用情况。如果将 ps 与 grep 组合起来选择特定的进程，并使用 awk 来计算总量，就可以获取单个应用程序或者某个应用程序及其子进程正占用多少物理内存和虚拟内存。</p><p>例如，要确定 bash 进程所使用的物理内存和虚拟内存，可以使用清单 14 中的命令。</p><p>清单 14. 使用 ps 和 awk 计算内存使用情况<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps -A -o rss,vsz,<span class="built_in">command</span>|grep bash | \</span><br><span class="line">     awk <span class="string">'&#123;rss += $1; vsz += $2 &#125; END &#123; print "Real: ",rss, "Virtual: ",vsz &#125;'</span></span><br><span class="line">Real:  4004 Virtual:  305624</span><br></pre></td></tr></table></figure></p><p>这在诊断内存和交换区使用情况的问题时特别有用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时启动任务</title>
      <link href="/%E5%AE%9A%E6%97%B6%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
      <url>/%E5%AE%9A%E6%97%B6%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/" target="_blank" rel="noopener">来源</a></p><p>我们经常会碰到这样的问题，用 telnet/ssh 登录了远程的 Linux 服务器，运行了一些耗时较长的任务， 结果却由于网络的不稳定导致任务中途失败。如何让命令提交后不受本地关闭终端窗口/网络断开连接的干扰呢？下面举了一些例子， 您可以针对不同的场景选择不同的方式来处理这个问题。</p><h2 id="nohup-setsid-amp"><a href="#nohup-setsid-amp" class="headerlink" title="nohup/setsid/&amp;"></a><code>nohup/setsid/&amp;</code></h2><p>场景： 如果只是临时有一个命令需要长时间运行，什么方法能最简便的保证它在后台稳定运行呢？</p><p>解决方法：<br>我们知道，当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。因此，我们的解决办法就有两种途径：要么让进程忽略 HUP 信号，要么让进程运行在新的会话里从而成为不属于此终端的子进程。</p><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a><code>nohup</code></h3><p>nohup 无疑是我们首先想到的办法。顾名思义，nohup 的用途就是让提交的命令忽略 hangup 信号。让我们先来看一下 nohup 的帮助信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NOHUP(1)                         User Commands                        NOHUP(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       nohup - run a <span class="built_in">command</span> immune to hangups, with output to a non-tty</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       nohup COMMAND [ARG]...</span><br><span class="line">       nohup OPTION</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Run COMMAND, ignoring hangup signals.</span><br><span class="line"></span><br><span class="line">       --<span class="built_in">help</span> display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">       --version</span><br><span class="line">              output version information and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">       If  standard  input is a terminal, redirect it from an unreadable file.</span><br><span class="line">       If standard output is a terminal, append output to <span class="string">'nohup.out'</span> <span class="keyword">if</span>  pos‐</span><br><span class="line">       sible,  <span class="string">'$HOME/nohup.out'</span>  otherwise.  If standard error is a terminal,</span><br><span class="line">       redirect it to standard output.  To save output  to  FILE,  use  <span class="string">'nohup</span></span><br><span class="line"><span class="string">       COMMAND &gt; FILE'</span>.</span><br></pre></td></tr></table></figure><p>可见，nohup 的使用是十分方便的，只需在要处理的命令前加上 nohup 即可，标准输出和标准错误缺省会被重定向到 nohup.out 文件中。一般我们可在结尾加上”&amp;”来将命令同时放入后台运行，也可用”&gt;filename 2&gt;&amp;1”来更改缺省的重定向文件名。</p><p>nohup 示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]<span class="comment"># nohup ping www.ibm.com &amp;</span></span><br><span class="line">[1] 3059</span><br><span class="line">nohup: appending output to `nohup.out<span class="string">'</span></span><br><span class="line"><span class="string">[root@pvcent107 ~]# ps -ef |grep 3059</span></span><br><span class="line"><span class="string">root      3059   984  0 21:06 pts/3    00:00:00 ping www.ibm.com</span></span><br><span class="line"><span class="string">root      3067   984  0 21:06 pts/3    00:00:00 grep 3059</span></span><br><span class="line"><span class="string">[root@pvcent107 ~]#</span></span><br></pre></td></tr></table></figure><h3 id="setsid"><a href="#setsid" class="headerlink" title="setsid"></a><code>setsid</code></h3><p>nohup 无疑能通过忽略 HUP 信号来使我们的进程避免中途被中断，但如果我们换个角度思考，如果我们的进程不属于接受 HUP 信号的终端的子进程，那么自然也就不会受到 HUP 信号的影响了。setsid 就能帮助我们做到这一点。让我们先来看一下 setsid 的帮助信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SETSID(1)                        User Commands                       SETSID(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       setsid - run a program <span class="keyword">in</span> a new session</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       setsid [options] program [arguments]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       setsid runs a program <span class="keyword">in</span> a new session.</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       -c, --ctty</span><br><span class="line">              Set the controlling terminal to the current one.</span><br><span class="line"></span><br><span class="line">       -w, --<span class="built_in">wait</span></span><br><span class="line">              Wait  <span class="keyword">for</span>  the  execution  of the program to end, and <span class="built_in">return</span> the</span><br><span class="line">              <span class="built_in">exit</span> value of this program as the <span class="built_in">return</span> value of setsid.</span><br><span class="line"></span><br><span class="line">       -V, --version</span><br><span class="line">              Display version information and <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line">       -h, --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>可见 setsid 的使用也是非常方便的，也只需在要处理的命令前加上 setsid 即可。</p><p>setsid 示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~] setsid ping www.ibm.com</span><br><span class="line">[root@pvcent107 ~] ps -ef |grep www.ibm.com</span><br><span class="line">root     31094     1  0 07:28 ?        00:00:00 ping www.ibm.com</span><br><span class="line">root     31102 29217  0 07:29 pts/4    00:00:00 grep www.ibm.com</span><br><span class="line">[root@pvcent107 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>值得注意的是，上例中我们的进程 ID(PID)为31094，而它的父 ID（PPID）为1（即为 init 进程 ID），并不是当前终端的进程 ID。请将此例与nohup 例中的父 ID 做比较。</p><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a><code>&amp;</code></h3><p>这里还有一个关于 <code>subshell</code> 的小技巧。我们知道，将一个或多个命名包含在<code>()</code>中就能让这些命令在子 shell 中运行中，从而扩展出很多有趣的功能，我们现在要讨论的就是其中之一。</p><p>当我们将”&amp;”也放入“()”内之后，我们就会发现所提交的作业并不在作业列表中，也就是说，是无法通过jobs来查看的。让我们来看看为什么这样就能躲过 HUP 信号的影响吧。</p><h3 id="subshell-示例"><a href="#subshell-示例" class="headerlink" title="subshell 示例"></a><code>subshell 示例</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]<span class="comment"># (ping www.ibm.com &amp;)</span></span><br><span class="line">[root@pvcent107 ~]<span class="comment"># ps -ef |grep www.ibm.com</span></span><br><span class="line">root     16270     1  0 14:13 pts/4    00:00:00 ping www.ibm.com</span><br><span class="line">root     16278 15362  0 14:13 pts/4    00:00:00 grep www.ibm.com</span><br><span class="line">[root@pvcent107 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>从上例中可以看出，新提交的进程的父 ID（PPID）为1（init 进程的 PID），并不是当前终端的进程 ID。因此并不属于当前终端的子进程，从而也就不会受到当前终端的 HUP 信号的影响了。</p><h3 id="disown"><a href="#disown" class="headerlink" title="disown"></a><code>disown</code></h3><p>场景：<br>我们已经知道，如果事先在命令前加上 nohup 或者 setsid 就可以避免 HUP 信号的影响。但是如果我们未加任何处理就已经提交了命令，该如何补救才能让它避免 HUP 信号的影响呢？</p><p>解决方法：<br>这时想加 nohup 或者 setsid 已经为时已晚，只能通过作业调度和 disown 来解决这个问题了。让我们来看一下 disown 的帮助信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">disown</span> [-ar] [-h] [jobspec ...]</span><br><span class="line">    Without options, each jobspec is  removed  from  the  table  of</span><br><span class="line">    active  <span class="built_in">jobs</span>.   If  the -h option is given, each jobspec is not</span><br><span class="line">    removed from the table, but is marked so  that  SIGHUP  is  not</span><br><span class="line">    sent  to the job <span class="keyword">if</span> the shell receives a SIGHUP.  If no jobspec</span><br><span class="line">    is present, and neither the -a nor the -r option  is  supplied,</span><br><span class="line">    the  current  job  is  used.  If no jobspec is supplied, the -a</span><br><span class="line">    option means to remove or mark all <span class="built_in">jobs</span>; the -r option  without</span><br><span class="line">    a  jobspec  argument  restricts operation to running <span class="built_in">jobs</span>.  The</span><br><span class="line">    <span class="built_in">return</span> value is 0 unless a jobspec does  not  specify  a  valid</span><br><span class="line">    job.</span><br></pre></td></tr></table></figure><p>可以看出，我们可以用如下方式来达成我们的目的。</p><h3 id="CTRL-z"><a href="#CTRL-z" class="headerlink" title="CTRL-z"></a><code>CTRL-z</code></h3><p>在我们的日常工作中，我们可以用 <code>CTRL-z</code> 来将当前进程挂起到后台暂停运行，执行一些别的操作，然后再用 <code>fg</code> 来将挂起的进程重新放回前台（也可用 <code>bg</code> 来将挂起的进程放在后台）继续运行。这样我们就可以在一个终端内灵活切换运行多个任务，这一点在调试代码时尤为有用。因为将代码编辑器挂起到后台再重新放回时，光标定位仍然停留在上次挂起时的位置，避免了重新定位的麻烦。</p><p>用disown -h jobspec来使某个作业忽略HUP信号。<br>用disown -ah 来使所有的作业都忽略HUP信号。<br>用disown -rh 来使正在运行的作业忽略HUP信号。<br>需要注意的是，当使用过 disown 之后，会将把目标作业从作业列表中移除，我们将不能再使用jobs来查看它，但是依然能够用ps -ef查找到它。</p><p>但是还有一个问题，这种方法的操作对象是作业，如果我们在运行命令时在结尾加了”&amp;”来使它成为一个作业并在后台运行，那么就万事大吉了，我们可以通过jobs命令来得到所有作业的列表。但是如果并没有把当前命令作为作业来运行，如何才能得到它的作业号呢？答案就是用 CTRL-z（按住Ctrl键的同时按住z键）了！</p><p>CTRL-z 的用途就是将当前进程挂起（Suspend），然后我们就可以用jobs命令来查询它的作业号，再用bg jobspec来将它放入后台并继续运行。需要注意的是，如果挂起会影响当前进程的运行结果，请慎用此方法。</p><p>disown 示例1（如果提交命令时已经用“&amp;”将命令放入后台运行，则可以直接使用“disown”）<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 build]<span class="comment"># cp -r testLargeFile largeFile &amp;</span></span><br><span class="line">[1] 4825</span><br><span class="line">[root@pvcent107 build]<span class="comment"># jobs</span></span><br><span class="line">[1]+  Running                 cp -i -r testLargeFile largeFile &amp;</span><br><span class="line">[root@pvcent107 build]<span class="comment"># disown -h %1</span></span><br><span class="line">[root@pvcent107 build]<span class="comment"># ps -ef |grep largeFile</span></span><br><span class="line">root      4825   968  1 09:46 pts/4    00:00:00 cp -i -r testLargeFile largeFile</span><br><span class="line">root      4853   968  0 09:46 pts/4    00:00:00 grep largeFile</span><br><span class="line">[root@pvcent107 build]<span class="comment"># logout</span></span><br></pre></td></tr></table></figure></p><p>disown 示例2</p><p>（如果提交命令时未使用“&amp;”将命令放入后台运行，可使用 CTRL-z 和“bg”将其放入后台，再使用“disown”）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 build]<span class="comment"># cp -r testLargeFile largeFile2</span></span><br><span class="line"> </span><br><span class="line">[1]+  Stopped                 cp -i -r testLargeFile largeFile2</span><br><span class="line">[root@pvcent107 build]<span class="comment"># bg %1</span></span><br><span class="line">[1]+ cp -i -r testLargeFile largeFile2 &amp;</span><br><span class="line">[root@pvcent107 build]<span class="comment"># jobs</span></span><br><span class="line">[1]+  Running                 cp -i -r testLargeFile largeFile2 &amp;</span><br><span class="line">[root@pvcent107 build]<span class="comment"># disown -h %1</span></span><br><span class="line">[root@pvcent107 build]<span class="comment"># ps -ef |grep largeFile2</span></span><br><span class="line">root      5790  5577  1 10:04 pts/3    00:00:00 cp -i -r testLargeFile largeFile2</span><br><span class="line">root      5824  5577  0 10:05 pts/3    00:00:00 grep largeFile2</span><br><span class="line">[root@pvcent107 build]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a><code>screen</code></h2><p>场景：<br>我们已经知道了如何让进程免受 HUP 信号的影响，但是如果有大量这种命令需要在稳定的后台里运行，如何避免对每条命令都做这样的操作呢？</p><p>解决方法：<br>此时最方便的方法就是 screen 了。简单的说，screen 提供了 ANSI/VT100 的终端模拟器，使它能够在一个真实终端下运行多个全屏的伪终端。screen 的参数很多，具有很强大的功能，我们在此仅介绍其常用功能以及简要分析一下为什么使用 screen 能够避免 HUP 信号的影响。我们先看一下 screen 的帮助信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SCREEN(1)                   General Commands Manual                  SCREEN(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       screen - screen manager with VT100/ANSI terminal emulation</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       screen [ -options ] [ cmd [ args ] ]</span><br><span class="line">       screen -r [[pid.]tty[.host]]</span><br><span class="line">       screen -r sessionowner/[[pid.]tty[.host]]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Screen is a full-screen window manager that multiplexes a physical ter‐</span><br><span class="line">       minal between several processes (typically interactive  shells).   Each</span><br><span class="line">       virtual terminal provides the <span class="built_in">functions</span> of a DEC VT100 terminal and, <span class="keyword">in</span></span><br><span class="line">       addition, several control <span class="built_in">functions</span> from the ISO 6429  (ECMA  48,  ANSI</span><br><span class="line">       X3.64)  and ISO 2022 standards (e.g. insert/delete line and support <span class="keyword">for</span></span><br><span class="line">       multiple character sets).  There is a  scrollback  <span class="built_in">history</span>  buffer  <span class="keyword">for</span></span><br><span class="line">       each virtual terminal and a copy-and-paste mechanism that allows moving</span><br><span class="line">       text regions between windows.</span><br></pre></td></tr></table></figure><p>使用 screen 很方便，有以下几个常用选项：</p><p>用screen -dmS session name来建立一个处于断开模式下的会话（并指定其会话名）。<br>用screen -list 来列出所有会话。<br>用screen -r session name来重新连接指定会话。<br>用快捷键CTRL-a d 来暂时断开当前会话。<br>screen 示例<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]<span class="comment"># screen -dmS Urumchi</span></span><br><span class="line">[root@pvcent107 ~]<span class="comment"># screen -list</span></span><br><span class="line">There is a screen on:</span><br><span class="line">        12842.Urumchi   (Detached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /tmp/screens/S-root.</span><br><span class="line"> </span><br><span class="line">[root@pvcent107 ~]<span class="comment"># screen -r Urumchi</span></span><br></pre></td></tr></table></figure></p><p>当我们用“-r”连接到 screen 会话后，我们就可以在这个伪终端里面为所欲为，再也不用担心 HUP 信号会对我们的进程造成影响，也不用给每个命令前都加上“nohup”或者“setsid”了。这是为什么呢？让我来看一下下面两个例子吧。</p><ol><li>未使用 screen 时新进程的进程树</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]<span class="comment"># ping www.google.com &amp;</span></span><br><span class="line">[1] 9499</span><br><span class="line">[root@pvcent107 ~]<span class="comment"># pstree -H 9499</span></span><br><span class="line">init─┬─Xvnc</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─2*[sendmail] </span><br><span class="line">     ├─sshd─┬─sshd───bash───pstree</span><br><span class="line">     │       └─sshd───bash───ping</span><br></pre></td></tr></table></figure><p>我们可以看出，未使用 screen 时我们所处的 bash 是 sshd 的子进程，当 ssh 断开连接时，HUP 信号自然会影响到它下面的所有子进程（包括我们新建立的 ping 进程）。</p><ol><li>使用了 screen 后新进程的进程树</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pvcent107 ~]<span class="comment"># screen -r Urumchi</span></span><br><span class="line">[root@pvcent107 ~]<span class="comment"># ping www.ibm.com &amp;</span></span><br><span class="line">[1] 9488</span><br><span class="line">[root@pvcent107 ~]<span class="comment"># pstree -H 9488</span></span><br><span class="line">init─┬─Xvnc</span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─screen───bash───ping</span><br><span class="line">     ├─2*[sendmail]</span><br></pre></td></tr></table></figure><p>而使用了 screen 后就不同了，此时 bash 是 screen 的子进程，而 screen 是 init（PID为1）的子进程。那么当 ssh 断开连接时，HUP 信号自然不会影响到 screen 下面的子进程了。</p><p>总结<br>现在几种方法已经介绍完毕，我们可以根据不同的场景来选择不同的方案。nohup/setsid 无疑是临时需要时最方便的方法，disown 能帮助我们来事后补救当前已经在运行了的作业，而 screen 则是在大批量操作时不二的选择了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>参考:</p><ul><li><a href="https://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank" rel="noopener">wiki</a></li><li>算法导论</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>首先, 排序是指, 将一个数组中的元素按照特定顺序放置, 并不一定是<code>从小到大</code>或者<code>从大到小</code>, 排序的最终目的, 很大时候是为了查找方便</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>算法的稳定性是指, 按照他们在输入中出现的位置对相同的元素进行排序. 也就是说, 对于每个输入的需要排序的元素, 我们按照某个key进行排序, 如果这两个key相同, 那么他们的顺序应该是他们输入的时候原来的对应前后位置.</p><p>例如一个数组</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(3, a), [3, b], (1, m)]</span><br></pre></td></tr></table></figure><p>我们对上面的数组, 按每个元素的<code>m[0]</code>为key进行排序, 如果我们采用的算法是稳定的, 那么结果应该是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(1,m), (3, a), (3, b)]</span><br></pre></td></tr></table></figure><h3 id="O符号"><a href="#O符号" class="headerlink" title="O符号"></a><code>O</code>符号</h3><p>对于一个排序算法的性能比较, 经常出现的一个符号是<code>O</code>, 这个应该叫做<code>渐进符号</code>, 我们采用<code>O</code>来标示算法的性能, 是指我们只关注算法消耗资源增长的数量级:</p><ul><li>如果<code>f(x)</code>是几个项的总和, 如果有一个具有最大增长率的项, 那么我们保留这个, 忽略其他的项</li><li>如果<code>f(x)</code>是几个因子的乘积, 则可以忽略所有的常数</li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>下面涉及的算法如果没有特殊说明, 那么应该是完成数组从小到大的排列</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序可以理解为, 数组最左边的value一定是数组中最小的值. 那么实现就应该是从数组中取出最小的那个value, 然后放到数组的最左边, 依次递归下去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSortDoc</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">        <span class="comment">// j应该是i左边的那个数</span></span><br><span class="line">        <span class="keyword">for</span> j := i+<span class="number">1</span>; j &lt; length; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j] &#123;</span><br><span class="line">                arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是最简单的实现, 但是我们看下这一步:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> arr[i] &gt; arr[j] &#123;</span><br><span class="line">    arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每碰到一个<code>arr[i]</code>大于<code>arr[j]</code>的数, 两个就要交换一下, 这样做了很多重复性的工作, 对吧, 因为我们只需要将<code>arr[i]</code>和<code>arr[i:]</code>中最小的那个作交换就可以了:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSortDocM</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>;  i &lt; length; i++ &#123;</span><br><span class="line">        min := i <span class="comment">// 这里引入一个中间变量min, 用来存储最小的那个索引</span></span><br><span class="line">        <span class="keyword">for</span> j := i+<span class="number">1</span>; j &lt; length; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[min] &gt; arr[j] &#123;</span><br><span class="line">                min = j</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断min是否是i, 不是的话两个值就缓过来</span></span><br><span class="line">        <span class="keyword">if</span> min != i &#123;</span><br><span class="line">            arr[i], arr[min] = arr[min], arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序就是将一个值插入到一个已经排好序的数组中. </p><p>插入排序可以理解为在一个排好序的数组<code>arr[1,2,3...k, k+1, ...n]</code>中, 每一个子数组<code>arr[0:k]</code>都是一个排好序的数组:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InsertionSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; length; i++ &#123;</span><br><span class="line">        j := i - <span class="number">1</span></span><br><span class="line">        key := arr[i]</span><br><span class="line">        <span class="keyword">for</span> j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key &#123;</span><br><span class="line">            <span class="comment">// 这里, 将j的位置统一右移一位</span></span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = key</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序的思想是, 一个排好序的数组<code>arr[1,2,3..., k, k+1... n]</code>中, 一定有:</p><ul><li>子数组<code>arr[0:k]</code>中的每一个值都不大于<code>arr[k]</code></li><li>子数组<code>arr[k+1:n]</code>中的每一个值都不小于<code>arr[k]</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSortDoc</span><span class="params">(arr []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 声明两个匿名函数</span></span><br><span class="line">    <span class="comment">// 用来对数组进行迭代排序</span></span><br><span class="line">    <span class="keyword">var</span> recurse <span class="function"><span class="keyword">func</span><span class="params">(left, right <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function">    // 找到数组中迭代每一次子数组中根据<span class="title">key</span>排序的<span class="title">key</span>的位置,</span></span><br><span class="line"><span class="function">    // 这时候<span class="title">key</span>应该是排好序的数组中的正确位置</span></span><br><span class="line"><span class="function">    <span class="title">var</span> <span class="title">partition</span> <span class="title">func</span><span class="params">(left, right <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">partition</span> = <span class="title">func</span><span class="params">(left, right <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        key := arr[right]</span><br><span class="line">        j := left</span><br><span class="line">        <span class="keyword">for</span> i := left; i &lt; right; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[i] &lt; key &#123;</span><br><span class="line">                arr[j], arr[i] = arr[i], arr[j]</span><br><span class="line">                j++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j], arr[right] = arr[right], arr[j]</span><br><span class="line">        <span class="keyword">return</span> j</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    recurse = <span class="function"><span class="keyword">func</span><span class="params">(left, right <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> left &lt; right &#123;</span><br><span class="line">            pivot := (right+left) / <span class="number">2</span></span><br><span class="line">            pivot = partition(left, right)</span><br><span class="line">            recurse(left, pivot<span class="number">-1</span>)</span><br><span class="line">            recurse(pivot+<span class="number">1</span>, right)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    recurse(<span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>// TODO 这个没有看懂, python版本的转换不到go上</p><p>归并排序的思想是合并两个已经排好序的列表形成新的列表:</p><ul><li>将未排序的列表分成n个子列表，每个子列表包含1个元素（1个元素的列表被认为是排序的）.</li><li>反复合并子列表以产生新的已排序子列表，直到只剩下1个子列表。这将是排序的列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    k = j = <span class="number">0</span></span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">while</span> k &lt; len(a) <span class="keyword">and</span> j &lt; len(b):</span><br><span class="line">        key_a = a[k]</span><br><span class="line">        key_b = b[j]</span><br><span class="line">        <span class="keyword">if</span> key_a &lt; key_b:</span><br><span class="line">            c.append(key_a)</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(key_b)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    c.extend(a[k:])</span><br><span class="line">    c.extend(b[j:])</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(lst)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(lst) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line">    mid = len(lst) // <span class="number">2</span></span><br><span class="line">    left = mergeSort(lst[:mid])</span><br><span class="line">    right = mergeSort(lst[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br></pre></td></tr></table></figure><p>go版本:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(arr)/<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mid := <span class="built_in">len</span>(arr) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    sort(arr[:mid])</span><br><span class="line">    sort(arr[mid:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> arr[mid<span class="number">-1</span>] &lt;= arr[mid] &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">copy</span>(s, arr[:mid])</span><br><span class="line"></span><br><span class="line">    l, r := <span class="number">0</span>, mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> s[l] &lt;= arr[r] &#123;</span><br><span class="line">            arr[i] = s[l]</span><br><span class="line">            l++</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> l == mid &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[i] = arr[r]</span><br><span class="line">            r++</span><br><span class="line">            <span class="keyword">if</span> r == <span class="built_in">len</span>(arr) &#123;</span><br><span class="line">                <span class="built_in">copy</span>(arr[i+<span class="number">1</span>:], s[l:mid])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>没写完还…</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> heap</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> Int <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x Int)</span> <span class="title">Less</span><span class="params">(than Item)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; than.(Int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">interface</span> &#123;</span><br><span class="line">    Less(than Item) <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Heap <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.Mutex</span><br><span class="line">    data []Item</span><br><span class="line">    min  <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">Heap</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Heap&#123;</span><br><span class="line">        data: <span class="built_in">make</span>([]Item, <span class="number">0</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMin</span><span class="params">()</span> *<span class="title">Heap</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Heap&#123;</span><br><span class="line">        data: <span class="built_in">make</span>([]Item, <span class="number">0</span>),</span><br><span class="line">        min:  <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMax</span><span class="params">()</span> *<span class="title">Heap</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Heap&#123;</span><br><span class="line">        data: <span class="built_in">make</span>([]Item, <span class="number">0</span>),</span><br><span class="line">        min:  <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(h.data) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(h.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">Get</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">Item</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h.data[n]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">Insert</span><span class="params">(n Item)</span></span> &#123;</span><br><span class="line">    h.Lock()</span><br><span class="line">    <span class="keyword">defer</span> h.Unlock()</span><br><span class="line"></span><br><span class="line">    h.data = <span class="built_in">append</span>(h.data, n)</span><br><span class="line">    h.siftUp()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">Extract</span><span class="params">()</span> <span class="params">(el Item)</span></span> &#123;</span><br><span class="line">    h.Lock()</span><br><span class="line">    <span class="keyword">defer</span> h.Unlock()</span><br><span class="line">    <span class="keyword">if</span> h.Len() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    el = h.data[<span class="number">0</span>]</span><br><span class="line">    last := h.data[h.Len()<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> h.Len() == <span class="number">1</span> &#123;</span><br><span class="line">        h.data = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h.data = <span class="built_in">append</span>([]Item&#123;last&#125;, h.data[<span class="number">1</span>:h.Len()<span class="number">-1</span>]...)</span><br><span class="line">    h.siftDown()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">siftUp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, parent := h.Len()<span class="number">-1</span>, h.Len()<span class="number">-1</span>; i &gt; <span class="number">0</span>; i = parent &#123;</span><br><span class="line">        parent = i &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> h.Less(h.Get(i), h.Get(parent)) &#123;</span><br><span class="line">            h.data[parent], h.data[i] = h.data[i], h.data[parent]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">siftDown</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, child := <span class="number">0</span>, <span class="number">1</span>; i &lt; h.Len() &amp;&amp; i&lt;&lt;<span class="number">1</span>+<span class="number">1</span> &lt; h.Len(); i = child &#123;</span><br><span class="line">        child = i&lt;&lt;<span class="number">1</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> child+<span class="number">1</span> &lt;= h.Len()<span class="number">-1</span> &amp;&amp; h.Less(h.Get(child+<span class="number">1</span>), h.Get(child)) &#123;</span><br><span class="line">            child++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> h.Less(h.Get(i), h.Get(child)) &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h.data[i], h.data[child] = h.data[child], h.data[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span> <span class="title">Less</span><span class="params">(a, b Item)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> h.min &#123;</span><br><span class="line">        <span class="keyword">return</span> a.Less(b)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b.Less(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python版本的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opt_heapsort</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="comment"># 获取列表的长度</span></span><br><span class="line">    sl = len(s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换根据value的大小交换两个value</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(pi, ci)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> s[pi] &lt; s[ci]:</span><br><span class="line">            s[pi], s[ci] = s[ci], s[pi]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sift</span><span class="params">(pi, unsorted)</span>:</span></span><br><span class="line">        <span class="comment"># 取最大的那个value的索引</span></span><br><span class="line">        i_gt = <span class="keyword">lambda</span> a, b: a <span class="keyword">if</span> s[a] &gt; s[b] <span class="keyword">else</span> b</span><br><span class="line">        <span class="keyword">while</span> pi*<span class="number">2</span>+<span class="number">2</span> &lt; unsorted:</span><br><span class="line">            gtci = i_gt(pi*<span class="number">2</span>+<span class="number">1</span>, pi*<span class="number">2</span>+<span class="number">2</span>)</span><br><span class="line">            swap(pi, gtci)</span><br><span class="line">            pi = gtci</span><br><span class="line">    <span class="comment"># heapify</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((sl//<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        sift(i, sl)</span><br><span class="line">    <span class="comment"># sort</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(sl<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        swap(i, <span class="number">0</span>)</span><br><span class="line">        sift(<span class="number">0</span>, i)</span><br></pre></td></tr></table></figure></p><h3 id="树排序"><a href="#树排序" class="headerlink" title="树排序"></a>树排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line">    TreeSort(a)</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tree sort 的过程如下</span></span><br><span class="line"><span class="comment">// 定义一个treetype的变量，然后将切片的每一项元素加入到tree中</span></span><br><span class="line"><span class="comment">// 然后递归的将tree的元素按照左边中间右边的顺序取出来</span></span><br><span class="line"><span class="comment">// 1. 插入输，插入的时候，应该保证左边小于右边</span></span><br><span class="line"><span class="keyword">type</span> tree <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="keyword">int</span></span><br><span class="line">    left, rigth *tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TreeSort</span><span class="params">(values []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> root *tree</span><br><span class="line">    <span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">        root = add(root, value)</span><br><span class="line">    &#125;</span><br><span class="line">    appendValues(values[:<span class="number">0</span>], root) <span class="comment">// 这里请求的第一个参数是和values公用一个底层数组的切片，长度为0， 容量为values原来的长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendValues</span><span class="params">(values []<span class="keyword">int</span>, root *tree)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">        values = appendValues(values, root.left)</span><br><span class="line">        values = <span class="built_in">append</span>(values, root.value)</span><br><span class="line">        values = appendValues(values, root.rigth)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(t *tree, value <span class="keyword">int</span>)</span> *<span class="title">tree</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化， 刚开始的时候root为nil</span></span><br><span class="line">        t = <span class="built_in">new</span>(tree) <span class="comment">// 创建一个treetype的指针，指针名字为t</span></span><br><span class="line">        t.value = value</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> value &lt; t.value &#123;</span><br><span class="line">        t.left = add(t.left, value) <span class="comment">// 这里递归的将value加入左子树</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        t.rigth = add(t.rigth, value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消除序列中重复元素的最好方法</title>
      <link href="/%E6%B6%88%E9%99%A4%E5%BA%8F%E5%88%97%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A5%BD%E6%96%B9%E6%B3%95/"/>
      <url>/%E6%B6%88%E9%99%A4%E5%BA%8F%E5%88%97%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A5%BD%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>来源于<a href="https://code.activestate.com/recipes/52560/" target="_blank" rel="noopener">这篇文章</a></p><p>从序列中删除重复项的最快方法取决于序列元素的一些非常细微的属性，例如它们是否可哈希以及它们是否支持完全比较。 <code>unique()</code>函数尝试三种方法，从最快到最慢，让运行时异常选择可用于当前序列的最佳方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unique</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    for best speed, all sequence elements should be hashble.</span></span><br><span class="line"><span class="string">    Then unique() will usually work in linear time.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if not possible, the swquenct elements should enjoy a total ordering, </span></span><br><span class="line"><span class="string">    and if `list(s).sort()` doesn't raise TypeError, it is assumed that they </span></span><br><span class="line"><span class="string">    do enjoy a total ordering.</span></span><br><span class="line"><span class="string">    Then unique() will usually work in O(N*logN) time.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If that's not possible either, the sequence elements must support</span></span><br><span class="line"><span class="string">    equality-testing.  Then unique() will usually work in quadratic</span></span><br><span class="line"><span class="string">    time.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    n = len(s)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># try using a dict first, as that is the fastest and usually work</span></span><br><span class="line">    u = &#123;&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">            u[x] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="keyword">del</span> u <span class="comment"># move on to the next method</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> u.keys()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t = list(s)</span><br><span class="line">        t.sort()</span><br><span class="line">    <span class="keyword">except</span> TypeError:</span><br><span class="line">        <span class="keyword">del</span> t <span class="comment"># move on to the next method</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> n &gt; <span class="number">0</span></span><br><span class="line">        last = t[<span class="number">0</span>]</span><br><span class="line">        lasti = i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            <span class="keyword">if</span> t[i] != last:</span><br><span class="line">                t[lasti] = last = t[i]</span><br><span class="line">                lasti += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> t[:lasti]</span><br><span class="line"></span><br><span class="line">    u = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> u:</span><br><span class="line">            u.append(x)</span><br><span class="line">    <span class="keyword">return</span> u</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python programming FAQ</title>
      <link href="/python-programming-FAQ(%E7%BF%BB%E8%AF%91)/"/>
      <url>/python-programming-FAQ(%E7%BF%BB%E8%AF%91)/</url>
      
        <content type="html"><![CDATA[<p>来源于python文档的<a href="https://docs.python.org/3/faq/programming.html" target="_blank" rel="noopener"><code>Programmming FAQ</code></a>, 单纯的翻译过来, 有些地方还需要进一步深入.</p><h2 id="Core-Language"><a href="#Core-Language" class="headerlink" title="Core Language"></a>Core Language</h2><h3 id="why-am-i-getting-an-UnboundLocalError-when-the-cariable-has-a-value"><a href="#why-am-i-getting-an-UnboundLocalError-when-the-cariable-has-a-value" class="headerlink" title="why am i getting an UnboundLocalError when the cariable has a value?"></a>why am i getting an <code>UnboundLocalError</code> when the cariable has a value?</h3><p>TODO: <a href="https://www.python.org/dev/peps/pep-3104/" target="_blank" rel="noopener">Access to Names in Outer Scopes</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     print(x)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: bar()</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     print(x)</span><br><span class="line">   ...:     x+=<span class="number">1</span></span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: foo()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnboundLocalError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-5</span>-c19b6d9633cf&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 foo()</span><br><span class="line"></span><br><span class="line">&lt;ipython-input<span class="number">-4</span>-baf15b7aced1&gt; <span class="keyword">in</span> foo()</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">----&gt; 2     print(x)</span><br><span class="line">      <span class="number">3</span>     x+=<span class="number">1</span></span><br><span class="line">      <span class="number">4</span></span><br><span class="line"></span><br><span class="line">UnboundLocalError: local variable <span class="string">'x'</span> referenced before assignment</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     print(x)</span><br><span class="line">   ...:     x= x+<span class="number">1</span></span><br><span class="line">   ...:</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: foo()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnboundLocalError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-7</span>-c19b6d9633cf&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 foo()</span><br><span class="line"></span><br><span class="line">&lt;ipython-input<span class="number">-6</span><span class="number">-1</span>fe44c88aa4d&gt; <span class="keyword">in</span> foo()</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">----&gt; 2     print(x)</span><br><span class="line">      <span class="number">3</span>     x= x+<span class="number">1</span></span><br><span class="line">      <span class="number">4</span></span><br><span class="line">      <span class="number">5</span></span><br><span class="line"></span><br><span class="line">UnboundLocalError: local variable <span class="string">'x'</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>可以理解为, 当你对作用域中的变量进行赋值的时候, 这个变量将作为该作用域的局部变量, 并在外部作用域中对任何具有相同名称的变量进行屏蔽.<br>在后俩失败的<code>foo()</code>函数中, 由于要对<code>x</code>进行赋值, 编译器就认为<code>x</code>是一个局部变量, 但是你在函数中并没有对x进行声明, 所以就报错咯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     print(x)</span><br><span class="line">   ...:     n = x + <span class="number">1</span></span><br><span class="line">   ...:     print(x)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: foo()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    n = x + <span class="number">1</span></span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: foo()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line">    n = x + <span class="number">1</span></span><br><span class="line">    print(n)</span><br><span class="line">    x -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: foo()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnboundLocalError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-7</span><span class="number">-624891</span>b0d01a&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 foo()</span><br><span class="line"></span><br><span class="line">&lt;ipython-input<span class="number">-6</span><span class="number">-2374</span>c4171c35&gt; <span class="keyword">in</span> foo()</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">----&gt; 2     print(x)</span><br><span class="line">      <span class="number">3</span>     n = x + <span class="number">1</span></span><br><span class="line">      <span class="number">4</span>     print(n)</span><br><span class="line">      <span class="number">5</span>     x -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">UnboundLocalError: local variable <span class="string">'x'</span> referenced before assignment</span><br></pre></td></tr></table></figure><ul><li>TODO: </li></ul><p>在python中, 每一个对象创建的时候, 都有一个标示, 也就是变量的名称, 一个类型和一个值.</p><p>可不可以理解为, <code>x = x + 1</code>是: 新建一个变量x, 这时候x已经覆盖了外部的x变量, 但是还没有赋值,然后等号右边对x进行赋值, 这时候x是一个声明但没有赋值的对象, 然后就报错???</p><p>那如果我想在函数中对全局变量操作个需要怎么办?</p><ul><li>利用<code>golbal</code>关键字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: x</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fooa</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     <span class="keyword">global</span> x</span><br><span class="line">   ....:     print(x)</span><br><span class="line">   ....:     x += <span class="number">1</span></span><br><span class="line">   ....:     print(x)</span><br><span class="line">   ....:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: fooa()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: x</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>利用<code>nonlocal</code>关键字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foobar</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     x = <span class="number">10</span></span><br><span class="line">   ....:     <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">   ....:         <span class="keyword">nonlocal</span> x</span><br><span class="line">   ....:         print(x)</span><br><span class="line">   ....:         x += <span class="number">1</span></span><br><span class="line">   ....:     bar()</span><br><span class="line">   ....:     print(x)</span><br><span class="line">   ....:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: foobar()</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foobar</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment">#nonlocal x</span></span><br><span class="line">        print(x)</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">    bar()</span><br><span class="line">    print(x) </span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: foobar()</span><br><span class="line"></span><br><span class="line">UnboundLocalError: local variable <span class="string">'x'</span> referenced before assignment</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: x</span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foobar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        print(x)</span><br><span class="line">        x = <span class="number">3</span></span><br><span class="line">    bar()</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">SyntaxError: no binding <span class="keyword">for</span> <span class="keyword">nonlocal</span> <span class="string">'x'</span> found</span><br><span class="line"><span class="comment"># nonlocal不能和global绑定的名称重复</span></span><br></pre></td></tr></table></figure><h3 id="What-are-the-rules-for-local-and-global-variables-in-Python"><a href="#What-are-the-rules-for-local-and-global-variables-in-Python" class="headerlink" title="What are the rules for local and global variables in Python"></a>What are the rules for local and global variables in Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fooa</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> p    </span><br><span class="line">    print(p)</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">    print(p)</span><br><span class="line">   ....:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: fooa()</span><br><span class="line">NameError: name <span class="string">'p'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>在Python中，仅在函数内引用的变量隐式地为全局变量。 如果一个变量在函数体内的任何位置被赋值，它被认为是一个局部变量，除非明确声明为全局变量。</p><p>尽管起初有点令人惊讶，但一时的考虑解释了这一点。 一方面，要求分配变量的全局值可以防止出现意想不到的副作用。 另一方面，如果所有全局引用都需要全局，则您将始终使用全局。 您必须声明为全局的每个对内置函数的引用或对导入模块的组件。 这种混乱将破坏全球声明确定副作用的有效性。</p><h3 id="Why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"><a href="#Why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" class="headerlink" title="Why do lambdas defined in a loop with different values all return the same result?"></a>Why do lambdas defined in a loop with different values all return the same result?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: squares = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">   ....:     squares.append(<span class="keyword">lambda</span>: x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: squares</span><br><span class="line">Out[<span class="number">31</span>]: </span><br><span class="line">[&lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;,</span><br><span class="line"> &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;,</span><br><span class="line"> &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;,</span><br><span class="line"> &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: squares[<span class="number">2</span>]()</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">9</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: squares[<span class="number">3</span>]()</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">9</span></span><br></pre></td></tr></table></figure><p>上面会隐式的创建一个变量x:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: squares = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    squares.append(<span class="keyword">lambda</span>: x**<span class="number">2</span>)</span><br><span class="line">   ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: x</span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>x不是lambda函数内部的变量, 而是在外部定义的, 然后x最终的值是3, 所以所有的函数都返回3**2:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: x = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: squares[<span class="number">3</span>]()</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">100</span></span><br></pre></td></tr></table></figure><p>如果想要值改变, 可以声明一个新的变量n, 然后将x的值赋给n:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>squares = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    squares.append(<span class="keyword">lambda</span> n=x: n**<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><h3 id="How-do-I-share-global-variables-across-modules"><a href="#How-do-I-share-global-variables-across-modules" class="headerlink" title="How do I share global variables across modules?"></a>How do I share global variables across modules?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mod.py</span></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">config.x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">import</span> mod</span><br><span class="line">print(config.x) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># main2.py</span></span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line">print(config.x) <span class="comment"># return  0</span></span><br></pre></td></tr></table></figure><h3 id="Why-are-default-values-shared-between-objects"><a href="#Why-are-default-values-shared-between-objects" class="headerlink" title="Why are default values shared between objects?"></a>Why are default values shared between objects?</h3><p>考虑一个不看文档的人或者大神写的一个函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=[])</span>:</span></span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(a):</span><br><span class="line">   ...:         b.append(i**<span class="number">2</span>)</span><br><span class="line">   ...:     print(b)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: foo(<span class="number">3</span>)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: foo(<span class="number">3</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: foo(<span class="number">4</span>)</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">help(foo)</span><br><span class="line"></span><br><span class="line">Help on function foo <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">foo(a, b=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure><p>看到了没, 当调用两次foo后, b的默认值已经变为了一大堆. </p><p>这是因为, 在python中, 当函数定义后, 默认值只创建一次, 如果默认值对象发生改变, 那么该函数的后续调用将引用这个已经更改的<br>对象.</p><p>根据定义, 诸如数字, 字符串, 元祖和None等不可变对象可以免于更改. 对于可变对象, 例如字典或者列表, 类实例等<br>的更改可能会导致混淆.</p><p>所以, 使用不可变对象作为默认值是一个好习惯, 所以上面可以写为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a=<span class="number">0</span>, b=None)</span>:</span></span><br><span class="line">    b = []</span><br><span class="line">    ...</span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure><p>也不是说说上面第一个写的一定是错的, 存在即是合理对吧, 你可以用这个特性做一些好玩的事情, 比如<br>写一个函数的缓存:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(arg1, arg2, _cache=&#123;&#125;)</span>:</span></span><br><span class="line">    cache_key = cache_key_func(*args)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> _cache[<span class="string">"cache_key"</span>]</span><br><span class="line">    expect KeyError:</span><br><span class="line">        response = func(*args)</span><br><span class="line">        _cache[<span class="string">'cache_key'</span>] = response</span><br><span class="line">        <span class="keyword">return</span> _cache[<span class="string">"cache_key"</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>当然, 你也可以声明一~个全局变量做这些事情, 这么写没有对错, 你高兴就好.</p><h3 id="How-can-i-pass-optional-or-keyword-parameters-from-one-func-to-another"><a href="#How-can-i-pass-optional-or-keyword-parameters-from-one-func-to-another" class="headerlink" title="How can i pass optional or keyword parameters from one func to another?"></a>How can i pass optional or keyword parameters from one func to another?</h3><p>你可以用<code>*arg</code>和<code>**kwargs</code>两个关键字啦，</p><ul><li><code>*args</code>将位置参数作为一个tuple传进来</li><li><code>**kwagrs</code>将参数作为一个字典传进来</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, *args, **kwargs)</span>:</span></span><br><span class="line">    kwargs[<span class="string">"width"</span>] = <span class="string">"23.1"</span></span><br><span class="line">    ...</span><br><span class="line">    g(x, *args, **kwargs)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>上面这个, 神似装饰器吧, 其实装饰器也就这个作用</p><h3 id="What-is-the-difference-between-arguments-and-parameters"><a href="#What-is-the-difference-between-arguments-and-parameters" class="headerlink" title="What is the difference between arguments and parameters?"></a>What is the difference between arguments and parameters?</h3><ul><li>parameters 是定义在函数中使用到的参数的名字, 或者说是参数的类型</li><li>arguments 是实际传入的value</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(foo, bar=None, **kwars)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func(<span class="number">32</span>, bar=<span class="number">33</span>, extra=somevar)</span><br></pre></td></tr></table></figure><p>上面中, foo, bar, kwargs是parameters, 32, 33, somevae是arguments</p><h3 id="Why-did-changing-list-‘y’-also-change-list-‘x’"><a href="#Why-did-changing-list-‘y’-also-change-list-‘x’" class="headerlink" title="Why did changing list ‘y’ also change list ‘x’?"></a>Why did changing list ‘y’ also change list ‘x’?</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: x = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: y= x</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: x.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: y</span><br><span class="line">Out[<span class="number">21</span>]: [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: x</span><br><span class="line">Out[<span class="number">22</span>]: [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>导致这个问题有两个原因:</p><ul><li><ol><li>变量仅仅是一个对象引用的名字, 当执行<code>y=x</code>的时候, 并没有创建一个list的复制, 而是创建了一个新de<br>引用, 这个引用就是x引用的那个对象, 也就是说, xy都指向相同的一个对象, id是相同的</li></ol></li><li><p>2.lists是可变的, 也就是说, 可以改变他们的内容</p><p>再看一个例子:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> In [<span class="number">28</span>]: x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: y = x</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: x = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: y</span><br><span class="line">Out[<span class="number">31</span>]: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>这是因为integers是不可变对象, 当我们执行<code>x=6</code>的时候不是将整数5更新为6, 而是创建<br>了一个新的整数对象, 值是6, 然后把它赋值给x, 也就是说现在我们总共创建了两个对象, 然后xy两个对象<br>分别引用不同的对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">32</span>]: id(x)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">10919584</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: id(y)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">10919552</span></span><br></pre></td></tr></table></figure><p>一些行为, 例如<code>y.append(10)</code>或者<code>y.sort()</code>会在原有的对象上进行更改, 但是<br>一些相似的行为会创建一个新的对象, 例如<code>y = y + [1,2,3]</code>或者<code>sorted(y)</code>,<br>一个简单的方法分辨这两种对象是根据返回值来判断, 如果这个操作返回的是<code>None</code>, 那么<br>就是在原有的对象上进行的操作.</p><p>总的来说:</p><ul><li><p>如果对可变对象进行操作, 我们可以用一些特定的操作来更新它然后让所有的对象都看到相同的value</p></li><li><p>对于不可变对象, 例如<code>int</code>, <code>str</code>, <code>tuple</code>等, 所有引用它的变量都能看到相同的值, 但是更新这个对象的操作总会<br>返回一个新的对象</p></li></ul><p>###　How do I write a function with output parameters (call by reference)?</p><p>记住, 在python中, 是参数是通过赋值传递的, 也就是说, 参数传进来的只是一个value,<br>由于赋值只是创建对象的引用，所以在调用者和被调用者之间的参数名称之间没有别名，因此没有本身的引用调用。 您可以通过多种方式达到预期效果。</p><ul><li>by returning a typle of the results:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a = <span class="string">"new_value"</span></span><br><span class="line">    b = b + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> a, b</span><br><span class="line"></span><br><span class="line">x, y = <span class="string">"old-value"</span>, <span class="number">99</span></span><br><span class="line">x, y = func(x, y)</span><br><span class="line">print(x, y) <span class="comment"># new_value, 100</span></span><br></pre></td></tr></table></figure><p>这个是最清晰也是最常用的方法</p><ul><li><p>通过全局变量, 但是这个不是线性安全的, 不推荐</p></li><li><p>通过传递一个可变对象</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></span><br><span class="line">   ....:     a.append(<span class="number">2</span>)</span><br><span class="line">   ....:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: a</span><br><span class="line">Out[<span class="number">40</span>]: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: func(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: a</span><br><span class="line">Out[<span class="number">42</span>]: [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>传入一个字典更改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(args)</span>:</span></span><br><span class="line">    args[<span class="string">'a'</span>] = <span class="string">'new-value'</span>     <span class="comment"># args is a mutable dictionary</span></span><br><span class="line">    args[<span class="string">'b'</span>] = args[<span class="string">'b'</span>] + <span class="number">1</span>   <span class="comment"># change it in-place</span></span><br><span class="line"></span><br><span class="line">args = &#123;<span class="string">'a'</span>: <span class="string">'old-value'</span>, <span class="string">'b'</span>: <span class="number">99</span>&#125;</span><br><span class="line">func3(args)</span><br><span class="line">print(args[<span class="string">'a'</span>], args[<span class="string">'b'</span>])</span><br></pre></td></tr></table></figure><ul><li>把参数当成类的属性:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个方法貌似在django的中间件还是哪里用过</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">callByRef</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **args)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> (key, value) <span class="keyword">in</span> args.items():</span><br><span class="line">            setattr(self, key, value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">(args)</span>:</span></span><br><span class="line">    args.a = <span class="string">'new-value'</span>        <span class="comment"># args is a mutable callByRef</span></span><br><span class="line">    args.b = args.b + <span class="number">1</span>         <span class="comment"># change object in-place</span></span><br><span class="line"></span><br><span class="line">args = callByRef(a=<span class="string">'old-value'</span>, b=<span class="number">99</span>)</span><br><span class="line">func4(args)</span><br><span class="line">print(args.a, args.b)</span><br></pre></td></tr></table></figure><h3 id="How-do-you-make-a-higher-order-function-in-Python"><a href="#How-do-you-make-a-higher-order-function-in-Python" class="headerlink" title="How do you make a higher order function in Python?"></a>How do you make a higher order function in Python?</h3><p>你可以创建一个嵌套的作用域或者利用python的<code>__call__(self)</code>方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 嵌套作用域, 装饰器啦</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear</span><span class="params">(a ,b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a*x + b</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># __call__方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        self.a, self.b = a, b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.a*x + self.b</span><br><span class="line"></span><br><span class="line">dd = Linear(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">dd(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>TODO: 对象可以封装几种方法的状态, 这句看不懂什么意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>:</span></span><br><span class="line">    </span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sets</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.value = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.value -= <span class="number">1</span></span><br><span class="line">count = Counter()</span><br><span class="line">sets, up, down = count.sets, up, down <span class="comment"># 在scrapy的download middleware中, 就是这么处理的</span></span><br></pre></td></tr></table></figure><h3 id="How-do-I-copy-an-object-in-Python"><a href="#How-do-I-copy-an-object-in-Python" class="headerlink" title="How do I copy an object in Python?"></a>How do I copy an object in Python?</h3><p>通常的, 可以试着用<code>copy()</code>或者<code>deepcopy()</code>方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">newdict = olddict.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于序列对象还可以用索引来做</span></span><br><span class="line">new_list = oldlist[:]</span><br></pre></td></tr></table></figure><h3 id="Is-there-an-equivalent-of-C’s-“-”-ternary-operator"><a href="#Is-there-an-equivalent-of-C’s-“-”-ternary-operator" class="headerlink" title="Is there an equivalent of C’s “?:” ternary operator ?"></a>Is there an equivalent of C’s “?:” ternary operator ?</h3><p>在python中有这样的定义:<code>on_true if expression else on_false</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">10</span>, <span class="number">20</span></span><br><span class="line">small = x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y</span><br></pre></td></tr></table></figure><p>但是, 这么做可能会引发一些问题, 尤其是当前面的x返回的不是bool而是一些异常的时候, 所以最好用<code>...if ...slse..</code>这种形式</p><h3 id="How-do-i-modify-a-string-in-place"><a href="#How-do-i-modify-a-string-in-place" class="headerlink" title="How do i modify a string in place?"></a>How do i modify a string in place?</h3><p>you can’t, because strings are immutable. In most situations, you should simply construct a<br>new strings from the various parts you want to assemble it from,<br>但是如果你想原址的修改<code>unicode</code>对象, 那么可以试试<code>io.StringIO</code>模块或者<code>array</code>模块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = <span class="string">"hellow world"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: sio = io.StringIO(s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: sio</span><br><span class="line">Out[<span class="number">4</span>]: &lt;_io.StringIO at <span class="number">0x1dbd77b6f78</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: sio.getvalue()</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'hellow world'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: sio.seek()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-6</span><span class="number">-0007</span>ce4a479a&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 sio.seek()</span><br><span class="line"></span><br><span class="line">TypeError: seek() takes at least <span class="number">1</span> argument (<span class="number">0</span> given)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: sio.seek(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: sio.write(<span class="string">"there"</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: sio.getvalue()</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'helthereorld'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: a = array.array(<span class="string">"u"</span>, s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: print(a)</span><br><span class="line">array(<span class="string">'u'</span>, <span class="string">'hellow world'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: a[<span class="number">0</span>] = <span class="string">"y"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: print(a)</span><br><span class="line">array(<span class="string">'u'</span>, <span class="string">'yellow world'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: a.tounicode()</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'yellow world'</span></span><br></pre></td></tr></table></figure><h3 id="How-do-I-use-strings-to-call-functions-methods"><a href="#How-do-I-use-strings-to-call-functions-methods" class="headerlink" title="How do I use strings to call functions/methods?"></a>How do I use strings to call functions/methods?</h3><p>这个方法就多了:</p><ol><li>最好的方法是用一个字典映射字符串和函数, 这种方法好的一点是不用一定将字符串<br>和函数名字一样:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">dispath = &#123;<span class="string">"go"</span>:a, <span class="string">"stop"</span>:b&#125;</span><br><span class="line">dispath[get_input()]() <span class="comment"># 执行输入的字符串那个函数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>用内置的函数<code>getattr()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo</span><br><span class="line">getattr(foo, <span class="string">"bar"</span>)</span><br></pre></td></tr></table></figure><p>请注意，getattr（）适用于任何对象，包括类，类实例，模块等。</p><p>这用于标准库中的几个地方，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">f = getattr(foo_instance, <span class="string">"do_"</span>+opname)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><ol start="3"><li>用<code>locals()</code>或者<code>eval()</code>函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line">fname = <span class="string">"myfunc"</span></span><br><span class="line">f = locals()[fname]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">In [21]: help(locals)</span></span><br><span class="line"><span class="string">Help on built-in function locals in module builtins:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">locals()</span></span><br><span class="line"><span class="string">    Return a dictionary containing the current scope's local variables.</span></span><br><span class="line"><span class="string">    # 返回包含当前作用域局部变量的字典。</span></span><br><span class="line"><span class="string">    NOTE: Whether or not updates to this dictionary will affect name lookups in</span></span><br><span class="line"><span class="string">    the local scope and vice-versa is *implementation dependent* and not</span></span><br><span class="line"><span class="string">    covered by any backwards compatibility guarantees.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">In [<span class="number">22</span>]: f = eval(fname)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: f</span><br><span class="line">Out[<span class="number">23</span>]: &lt;function __main__.myfunc&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: f()</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: help(eval)</span><br><span class="line">Help on built-<span class="keyword">in</span> function eval <span class="keyword">in</span> module builtins:</span><br><span class="line"></span><br><span class="line">eval(source, globals=<span class="keyword">None</span>, locals=<span class="keyword">None</span>, /)</span><br><span class="line">    Evaluate the given source <span class="keyword">in</span> the context of globals <span class="keyword">and</span> locals.</span><br><span class="line"></span><br><span class="line">    The source may be a string representing a Python expression</span><br><span class="line">    <span class="keyword">or</span> a code object <span class="keyword">as</span> returned by compile().</span><br><span class="line">    The globals must be a dictionary <span class="keyword">and</span> locals can be any mapping,</span><br><span class="line">    defaulting to the current globals <span class="keyword">and</span> locals.</span><br><span class="line">    If only globals <span class="keyword">is</span> given, locals defaults to it.</span><br></pre></td></tr></table></figure><p>虽然说存在即是合理, 但是不知道在哪里用<code>eval</code>这个函数, 不推荐用</p><h3 id="What-is-the-most-efficient-way-to-concatenate-many-strings-together"><a href="#What-is-the-most-efficient-way-to-concatenate-many-strings-together" class="headerlink" title="What is the most efficient way to concatenate many strings together?"></a>What is the most efficient way to concatenate many strings together?</h3><p>str和bytes对象是不可变的，因此将许多字符串连接在一起效率不高，因为每个连接都会创建一个新对象。 在一般情况下，总运行时间成本在总字符串长度中是二次方的。</p><p>To accumulate many str objects, the recommended idiom is to place them into a list and call str.join() at the end:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chunks = []</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> my_strings:</span><br><span class="line">    chunks.append(s)</span><br><span class="line">result = <span class="string">''</span>.join(chunks)</span><br><span class="line"><span class="comment"># 当然, 别忘了`io.StringIO`这个模块</span></span><br></pre></td></tr></table></figure></p><p>To accumulate many bytes objects, the recommended idiom is to extend a bytearray object using in-place concatenation (the += operator):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = bytearray()</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> my_bytes_objects:</span><br><span class="line">    result += b</span><br></pre></td></tr></table></figure></p><h3 id="How-do-I-iterate-over-a-sequence-in-reverse-order"><a href="#How-do-I-iterate-over-a-sequence-in-reverse-order" class="headerlink" title="How do I iterate over a sequence in reverse order?"></a>How do I iterate over a sequence in reverse order?</h3><ol><li><code>reversed()</code>函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> reversed(sequence):</span><br><span class="line">    ... <span class="comment"># do somethings with x</span></span><br></pre></td></tr></table></figure><ol start="2"><li>利用序列的索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> sequence[::<span class="number">-1</span>]:</span><br><span class="line">    ... <span class="comment"># do somethings with x</span></span><br></pre></td></tr></table></figure><h3 id="How-do-you-remove-duplicates-from-a-list"><a href="#How-do-you-remove-duplicates-from-a-list" class="headerlink" title="How do you remove duplicates from a list?"></a>How do you remove duplicates from a list?</h3><p>如果不关心原来列表的顺序, 那么可以先对列表排序然后删除重复的value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> mylist:</span><br><span class="line">    mylist.sort()</span><br><span class="line">    last = mylist[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mylist)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> last == mylist[i]:</span><br><span class="line">            <span class="keyword">del</span> mylist[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            last = mylist[i]</span><br></pre></td></tr></table></figure><p>如果列表中所有的value都是<code>hashable</code>的, 那么可以直接调用<code>mylist = list(set(mylist))</code></p><h3 id="How-do-you-make-an-array-in-Python"><a href="#How-do-you-make-an-array-in-Python" class="headerlink" title="How do you make an array in Python?"></a>How do you make an array in Python?</h3><p>用列表代替啦, python的列表和c的不同在于, python的列表中的项可以是不同的类型. </p><p>当然, 也可以用内置的<code>array</code>模块来创建一个数组, 但是它的索引会比list慢.</p><h3 id="How-do-I-create-a-multidimensional-list"><a href="#How-do-I-create-a-multidimensional-list" class="headerlink" title="How do I create a multidimensional list?"></a>How do I create a multidimensional list?</h3><p>你肯定会想到这种骚操作:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: a = [[<span class="keyword">None</span>] * <span class="number">2</span>] * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: a</span><br><span class="line">Out[<span class="number">27</span>]: [[<span class="keyword">None</span>, <span class="keyword">None</span>], [<span class="keyword">None</span>, <span class="keyword">None</span>], [<span class="keyword">None</span>, <span class="keyword">None</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: a</span><br><span class="line">Out[<span class="number">29</span>]: [[<span class="number">2</span>, <span class="keyword">None</span>], [<span class="number">2</span>, <span class="keyword">None</span>], [<span class="number">2</span>, <span class="keyword">None</span>]]</span><br></pre></td></tr></table></figure></p><p>很伤心对吧, 直到为啥吗?<br>原因是用<code>*</code>复制列表不会创建副本，它只会创建对现有对象的引用。<br><code>* 3</code>创建一个列表，其中包含3个对长度为2的相同列表的引用。<br> 一行中的更改将显示在所有行中，这几乎肯定不是您想要的。</p><p>你知道有个库叫<code>numpy</code>吗? 不知道吧, 去看看吧!!!</p><h3 id="Why-does-a-tuple-i-‘item’-raise-an-exception-when-the-addition-works-¶"><a href="#Why-does-a-tuple-i-‘item’-raise-an-exception-when-the-addition-works-¶" class="headerlink" title="Why does a_tuple[i] += [‘item’] raise an exception when the addition works?¶"></a>Why does a_tuple[i] += [‘item’] raise an exception when the addition works?¶</h3><p>看看上面写的可变对象和不可变对象的区别, tuple是不可变对象, 所以用list代替吧</p><h3 id="How-can-I-sort-one-list-by-values-from-another-list"><a href="#How-can-I-sort-one-list-by-values-from-another-list" class="headerlink" title="How can I sort one list by values from another list?"></a>How can I sort one list by values from another list?</h3><p>把他们合并成一个元组, 然后对结果列表进行排序, 然后再解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: list1 = [<span class="string">"what"</span>, <span class="string">"I'm"</span>, <span class="string">"sorting"</span>, <span class="string">"by"</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: list2 = [<span class="string">"something"</span>, <span class="string">"else"</span>, <span class="string">"to"</span>, <span class="string">"sort"</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: pairs = zip(list1, list2)</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: pairs = sorted(pairs)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: pairs</span><br><span class="line">Out[<span class="number">34</span>]: [(<span class="string">"I'm"</span>, <span class="string">'else'</span>), (<span class="string">'by'</span>, <span class="string">'sort'</span>), (<span class="string">'sorting'</span>, <span class="string">'to'</span>), (<span class="string">'what'</span>, <span class="string">'something'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: result = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> pairs]</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: result</span><br><span class="line">Out[<span class="number">36</span>]: [<span class="string">'else'</span>, <span class="string">'sort'</span>, <span class="string">'to'</span>, <span class="string">'something'</span>]</span><br></pre></td></tr></table></figure><p>An alternative for the last step is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>result = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> pairs: result.append(p[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>如果你觉得这更清晰，你可能更喜欢用这个来代替最终的列表理解。<br>然而，长列表的速度几乎是其两倍。 为什么？<br>首先，<code>append()</code>操作必须重新分配内存，<br>并且尽管每次都使用一些技巧来避免这样做，但它仍然需要偶尔执行，<br>而且花费相当多。 其次，表达式<code>result.append</code>需要一个额外的属性查询，<br>第三，从完成所有这些函数调用中减少速度。</p><h3 id="My-class-defunes-del-but-it-is-not-called-when-i-delete-the-object"><a href="#My-class-defunes-del-but-it-is-not-called-when-i-delete-the-object" class="headerlink" title="My class defunes del but it is not called when i delete the object"></a>My class defunes <strong>del</strong> but it is not called when i delete the object</h3><p>这有几个可能的原因。</p><ol><li><p><code>del</code>语句不一定会调用<code>__del __()</code>, 它只是递减对象的引用计数，并且如果该值达到零，则调用<code>__del __()</code>。</p></li><li><p>如果您的数据结构包含循环链接（例如，每个孩子都有一个父引用并且每个父代都有一个孩子列表的树），<br>引用计数将永远不会回到零。偶尔，Python运行一种算法来检测这样的周期，<br>但是垃圾收集器可能会在最后一次对数据结构的引用消失后运行一段时间，因此可能会在不方便且随机的时间调用<code>__del __()</code>方法。<br>如果您试图重现问题，这很不方便。更糟糕的是，对象的<code>__del __()</code>方法的执行顺序是任意的。<br>您可以运行<code>gc.collect()</code>来强制收集，但有病理情况下永远不会收集对象。</p></li><li><p>尽管使用了循环收集器，但对于每次完成它们时要调用的对象定义一个明确的<code>close（）</code>方法仍然是一个好主意。 <code>close（）</code>方法可以删除引用子对象的属性。不要直接调用<code>__del __（）</code>, 应该调用<code>close（）</code>，<code>close（）</code>应该确保它可以针对同一个对象多次调用。</p></li><li><p>避免循环引用的另一种方法是使用<code>weakref</code>模块，它允许您在不增加引用计数的情况下指向对象。例如，树数据结构应该为它们的父代和兄弟引用使用弱引用（如果它们需要它们！）。</p></li><li><p>最后，如果<code>__del __（）</code>方法引发异常，则会向<code>sys.stderr</code>输出警告消息。</p></li></ol><h3 id="Why-does-the-result-of-id-appear-to-be-not-unique"><a href="#Why-does-the-result-of-id-appear-to-be-not-unique" class="headerlink" title="Why does the result of id() appear to be not unique?"></a>Why does the result of id() appear to be not unique?</h3><h3 id="How-do-I-find-the-current-module-name"><a href="#How-do-I-find-the-current-module-name" class="headerlink" title="How do I find the current module name?"></a>How do I find the current module name?</h3><p>模块可以通过查看预定义的全局变量<code>__name__</code>找出它自己的模块名称。 如果这个值为<code>&#39;__main__&#39;</code>，<br>程序将作为脚本运行。 通常通过导入它们的许多模块还提供命令行界面或自检，<br>并且只在检查<code>__name__</code>后执行此代码：</p><h3 id="How-can-I-have-modules-that-mutually-import-each-other"><a href="#How-can-I-have-modules-that-mutually-import-each-other" class="headerlink" title="How can I have modules that mutually import each other?"></a>How can I have modules that mutually import each other?</h3><p><strong>没写, 没心情了</strong></p><p>Suppose you have the following modules:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># foo.py:</span></span><br><span class="line"><span class="keyword">from</span> bar <span class="keyword">import</span> bar_var</span><br><span class="line">foo_var = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bar.py:</span></span><br><span class="line"><span class="keyword">from</span> foo <span class="keyword">import</span> foo_var</span><br><span class="line">bar_var = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>The problem is that the interpreter will perform the following steps:</p><ul><li>main imports <code>foo</code></li><li>Empty globals for <code>foo</code> are created</li><li><code>foo</code> is compiled and starts executing</li><li><code>foo</code> imports <code>bar</code></li><li>Empty globals for <code>bar</code> are created</li><li><code>bar</code> is compiled and starts executing</li><li><code>bar</code> imports <code>foo</code> (which is a no-op since there already is a module named foo)</li><li><code>bar.foo_var = foo.foo_var</code></li></ul><p>The last step fails, because Python isn’t done with interpreting foo yet and the global symbol dictionary for foo is still empty.</p><p>The same thing happens when you use import foo, and then try to access foo.foo_var in global code.</p><p>There are (at least) three possible workarounds for this problem.</p><p>Guido van Rossum recommends avoiding all uses of from <module> import …, and placing all code inside functions. Initializations of global variables and class variables should use constants or built-in functions only. This means everything from an imported module is referenced as <module>.<name>.</name></module></module></p><p>Jim Roskind suggests performing steps in the following order in each module:</p><p>exports (globals, functions, and classes that don’t need imported base classes)<br>import statements<br>active code (including globals that are initialized from imported values).<br>van Rossum doesn’t like this approach much because the imports appear in a strange place, but it does work.</p><p>Matthias Urlichs recommends restructuring your code so that the recursive import is not necessary in the first place.</p><p>These solutions are not mutually exclusive.</p><h3 id="import-‘x-y-z’-returns-lt-module-‘x’-gt-how-do-I-get-z"><a href="#import-‘x-y-z’-returns-lt-module-‘x’-gt-how-do-I-get-z" class="headerlink" title="__import__(‘x.y.z’) returns &lt;module ‘x’&gt;; how do I get z?"></a><code>__import__(‘x.y.z’)</code> returns <code>&lt;module ‘x’&gt;</code>; how do I get z?</h3><p>Consider using the convenience function <code>import_module()</code> from <code>importlib</code> instead:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z = importlib.import_module(<span class="string">'x.y.z'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="When-I-edit-an-imported-module-and-reimport-it-the-changes-don’t-show-up-Why-does-this-happen-¶"><a href="#When-I-edit-an-imported-module-and-reimport-it-the-changes-don’t-show-up-Why-does-this-happen-¶" class="headerlink" title="When I edit an imported module and reimport it, the changes don’t show up. Why does this happen?¶"></a>When I edit an imported module and reimport it, the changes don’t show up. Why does this happen?¶</h3><p>For reasons of efficiency as well as consistency, Python only reads the module file on the first time a module is imported. If it didn’t, in a program consisting of many modules where each one imports the same basic module, the basic module would be parsed and re-parsed many times. To force re-reading of a changed module, do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="keyword">import</span> modname</span><br><span class="line">importlib.reload(modname)</span><br></pre></td></tr></table></figure><p>Warning: this technique is not 100% fool-proof. In particular, modules containing statements like</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> some_objects</span><br></pre></td></tr></table></figure><p>will continue to work with the old version of the imported objects. If the module contains class definitions, existing class instances will not be updated to use the new class definition. This can result in the following paradoxical behaviour:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> importlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cls</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = cls.C()                <span class="comment"># Create an instance of C</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>importlib.reload(cls)</span><br><span class="line">&lt;module <span class="string">'cls'</span> <span class="keyword">from</span> <span class="string">'cls.py'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(c, cls.C)       <span class="comment"># isinstance is false?!?</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="comment">#The nature of the problem is made clear if you print out the “identity” of the class objects:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(id(c.__class__))</span><br><span class="line"><span class="string">'0x7352a0'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(id(cls.C))</span><br><span class="line"><span class="string">'0x4198d0'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux获取文件编码</title>
      <link href="/linux%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/"/>
      <url>/linux%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="获取文件的编码方式"><a href="#获取文件的编码方式" class="headerlink" title="获取文件的编码方式"></a>获取文件的编码方式</h2><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p><code>file</code>命令用来获取文件的编码方式<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">luren@zz:~/hexo_client$ file db.json</span><br><span class="line">db.json: ASCII text, with no line terminators</span><br></pre></td></tr></table></figure></p><h3 id="vim的set命令"><a href="#vim的set命令" class="headerlink" title="vim的set命令"></a>vim的<code>set</code>命令</h3><p>在vim中用<code>: set fileencoding</code>也可以获取文件的编码方式<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileencoding=utf-8</span><br></pre></td></tr></table></figure></p><p>如果想要更改文件的编码方式, 可以用iconv命令, 当然, 也可以在vim中用: set fileencoding=utf-8来完成</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
